{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "Environment": {
      "Type": "String",
      "MinLength": "1",
      "Description": "Options: cert,prod",
      "AllowedValues": [ "cert", "prod"],
      "Default": "cert"
    },
    "cmd":{
        "Description":"Full list of commands to run",
        "Type":"String",
        "Default":"cd /ebs_dev/Aaron; nohup ./adhoc_script.sh > adhoc.out 2> adhoc.err < /dev/null &"
    }
    ,
    "hostIp":{
        "Description":"IP of EC2 box to run commands on",
        "Type":"String",
        "Default":"10.178.163.167"
    }
  },
  "Mappings": {
    "VpcConfigs": {
      "cert": {
        "SubnetIds": ["subnet-d2f232b3", "subnet-29f23248"],
        "SecurityGroupIds": ["sg-6548f80a"],
        "VpcId": "vpc-90df1ff1"
      },
      "prod": {
        "SubnetIds": ["subnet-aef232cf", "subnet-04f23265"],
        "SecurityGroupIds": ["sg-6548f80a"],
        "VpcId": "vpc-90df1ff1"
      }
    },
    "ExpireConfigs": {
      "cert": {
        "ExpireDays": 7
      },
      "prod": {
        "ExpireDays": 90
      }
    }
  },
  "Resources": {
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Join": ["", ["lambda_user_dl_adhoclambda_", { "Ref": "Environment" }, "_role"]]},
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },

    "LambdaExecutionPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName": { "Fn::Join": ["", ["lambda_user_dl_adhoclambda_", { "Ref": "Environment" }, "_policy"]]},
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{"Ref": "LambdaExecutionRole"}]
      }
    },

    "LambdaLogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : { "Fn::Join" : ["", ["/aws/lambda/dlAdhocLambda-", {"Ref": "Environment"}]]},
        "RetentionInDays" : { "Fn::FindInMap": ["ExpireConfigs", { "Ref": "Environment" }, "ExpireDays"] }
      }
    },

    "dlAdhocLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "ev-buildartifacts",
          "S3Key": { "Fn::Join": ["", ["apps/engvillage/", { "Ref": "Environment" }, "/dl_adhoc_lambda-aws.jar"]]}
        },
        "Description": "A function to run the adhoc script on the dataloading ec2",
        "Environment": {
          "Variables": {
            "cmd": { "Ref": "cmd" },
            "hostIp" : { "Ref" : "hostIp"}
          }
        },
        "FunctionName": { "Fn::Join" : ["", ["evCvpLambda-", {"Ref": "Environment"}]]},
        "Handler": "com.engineeringvillage.dataloading.lambda.DlAdhocLambdaHandler",
        "MemorySize": 3008,
        "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]  },
        "Runtime": "java8",
        "Timeout": 300,
        "VpcConfig": {
          "SubnetIds": {
            "Fn::FindInMap": ["VpcConfigs", { "Ref": "Environment" }, "SubnetIds"] },
          "SecurityGroupIds": {
            "Fn::FindInMap": ["VpcConfigs", { "Ref": "Environment" }, "SecurityGroupIds"] }
        }
      }
    },

    "dlAdhocLambdaFunctionVersion" : {
      "Type" : "AWS::Lambda::Version",
      "Properties" : {
        "FunctionName" : { "Ref" : "dlAdhocLambdaFunction" },
        "Description" : { "Fn::Join": ["", ["Latest ", { "Ref": "Environment"}, "version deployment"]] }
      }
    },

    "dlAdhocLambdaFunctionAlias" : {
      "Type" : "AWS::Lambda::Alias",
      "Properties" : {
        "FunctionName" : { "Ref" : "dlAdhocLambdaFunction" },
        "FunctionVersion" : { "Fn::GetAtt" : [ "dlAdhocLambdaFunctionVersion", "Version" ] },
        "Name" : "active"
      }
    },
    "AdhocLambdaRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Rule to kick off CVP Lambda function",
        "ScheduleExpression": "rate(1 hour)",
        "Name": { "Fn::Join": ["", ["evCvplambda-", { "Ref": "Environment" }, "_rule"]]},
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["evCvpLambdaFunction", "Arn"]  },
          "Id": { "Fn::Join": ["", ["evCvpLambda-", { "Ref": "Environment" }, ""]]},
          "Input" : "\"test\""
        }]
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "dlAdhocLambdaFunction" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["AdhocLambdaRule","Arn"] }
      }
    }
  }
}
