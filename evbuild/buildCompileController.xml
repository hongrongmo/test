<project name="engvillage" default="dist">
	<property environment="env"/>
	<!-- Default the property include to "local" -->
	<property name="property_include" value="local"/>
	<property file="properties/${property_include}.properties"/>

	<!-- Local working directory for the build -->
	<property name="workdir" value="${local.controller.webapp.home}"/>

	<!--
	  javac Compilation Controls
	  These properties control option settings on the Javac compiler when it
	  is invoked using the <javac> task.

	  compile.debug        Should compilation include the debug option?
	  compile.deprecation  Should compilation include the deprecation option?
	  compile.optimize     Should compilation include the optimize option?
	-->
	<property name="compile.debug" value="true" />
	<property name="compile.deprecation" value="false" />
	<property name="compile.optimize" value="false" />

	<!--
	  Compilation Classpath
	  
	  Create the classpath for the compile.  Includes the Tomcat libraries
	  and all the libraries from the controller app.  Excludes books!
	-->
	<path id="project.classpath">
		<fileset id="engvillage-jars" dir="${workdir}/WebContent/WEB-INF/lib" includes="*.jar" />
		<fileset id="appserver-lib-jars" dir="${local.catalina.home}/lib" includes="*.jar" />
		<fileset id="appserver-bin-jars" dir="${local.catalina.home}/bin" includes="*.jar" />
	</path>

	<target name="showProperties">
		<echo>
			PROPERTIES FOR buildCompileController
			=====================================
        	property_include = ${property_include}
            workdir = ${workdir}
            CATALINA_HOME= ${env.CATALINA_HOME}
        	JAVA_HOME = ${env.JAVA_HOME}
        	ANT_HOME = ${env.ANT_HOME}
        </echo>
	</target>

	<target name="clean">
		<delete dir="${workdir}/build" failonerror="false"/>
	</target>

	<!--
	  Compile Target
	  
	  Uses javac to compile all the controller src files.  Outputs to a classes
	  directory. The "compile" target transforms source files (from your "src" directory)
	  into object files in the appropriate location in the build directory.

	-->
	<target name="compile"  depends="showProperties">
		<!-- Create build folder if it doesn't exist -->
		<delete dir="${workdir}/build" failonerror="false"/>
		<mkdir dir="${workdir}/build"/>
		<mkdir dir="${workdir}/build/classes"/>

		<javac fork="true" 
		   sourcepath="" 
		   srcdir="${workdir}" 
		   destdir="${workdir}/build/classes" 
		   debug="${compile.debug}" 
		   deprecation="${compile.deprecation}" 
		   optimize="${compile.optimize}" 
		   memoryinitialsize="256m" 
		   memorymaximumsize="512m" 
		   classpathref="project.classpath"
		   includeantruntime="false">
			<exclude name="org/ei/data/books/tools/**" />
			<exclude name="org/ei/data/books/tocs/*" />
		</javac>

		<!-- Copy application resources -->
		<copy todir="${workdir}/build/classes">
			<fileset dir="${workdir}/src" excludes="**/*.java" />
			<fileset dir="${workdir}/resources" excludes="**/*.java" />
			<fileset dir="${workdir}/resources"/>
		</copy>


	</target>

	<!--
	  Javadoc Target (optional)
	-->
	<target name="javadoc" depends="">
		<mkdir dir="${javadoc.home}" />
		<javadoc sourcepath="${src.home}" packagenames="org.ei.*" classpath="${}" destdir="${javadoc.home}" />
	</target>

	<!--
	  Dist Target
	-->
	<target name="dist" depends="compile" description="Create binary distribution">

		<!-- Create application JAR file -->
		<jar jarfile="${workdir}/build/eilib.jar" basedir="${workdir}/build/classes">
			<exclude name="/org/ei/stripes/**"/>
		</jar>

		<!-- Distribute to applications -->
		<copy todir="${local.engresources.webapp.home}/WebContent/WEB-INF/lib" file="${workdir}/build/eilib.jar" />
		<copy todir="${local.engvillage.webapp.home}/WebContent/WEB-INF/lib" file="${workdir}/build/eilib.jar" />
		<copy todir="${local.logservice.webapp.home}/WebContent/WEB-INF/lib" file="${workdir}/build/eilib.jar" />
		<copy todir="${local.sessionservice.webapp.home}/WebContent/WEB-INF/lib" file="${workdir}/build/eilib.jar" />
		<copy todir="${local.docview.webapp.home}/WebContent/WEB-INF/lib" file="${workdir}/build/eilib.jar" />
	</target>

	<!-- TestNG Targets -->
	<property name="testng.report.dir" value="${workdir}/testng-search" />
	<path id="testngpath">
		<pathelement location="../ROOT/WebContent/WEB-INF/lib/testng-6.8.jar" />
	</path>
	<path id="runpath">
		<path refid="project.classpath" />
		<pathelement location="../ROOT/build/classes" />
	</path>
	
	<taskdef name="testng" classpathref="project.classpath" classname="org.testng.TestNGAntTask" />

	<target name="testng">
		<testng classpathref="runpath" outputdir="${testng.report.dir}" dumpenv="true" dumpsys="true" verbose="2">
			<xmlfileset dir="../ROOT/test" includes="testngsearch.xml"/>
		</testng>
	</target>

</project>
