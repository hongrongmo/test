<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright Â©2017 LexisNexis Univentio, The Netherlands. -->
<lexisnexis-patent-document schema-version="1.13" date-produced="20170601" file="US8578389B1.xml" produced-by="LexisNexis-Univentio" lang="eng" date-inserted="20131105" time-inserted="043056" date-changed="20170530" time-changed="091924">
  <bibliographic-data lang="eng">
    <publication-reference publ-type="Grant" publ-desc="Patent without a pre-grant publication">
      <document-id id="112445304">
        <country>US</country>
        <doc-number>8578389</doc-number>
        <kind>B1</kind>
        <date>20131105</date>
      </document-id>
      <document-id data-format="original">
        <country>US</country>
        <doc-number>08578389</doc-number>
        <kind>B1</kind>
        <date>20131105</date>
      </document-id>
      <document-id data-format="docdb" id="412046197">
        <doc-number>8578389</doc-number>
      </document-id>
      <document-id data-format="epodoc">
        <doc-number>US8578389</doc-number>
      </document-id>
    </publication-reference>
    <application-reference appl-type="utility">
      <document-id id="69764259">
        <country>US</country>
        <doc-number>10837607</doc-number>
        <date>20040504</date>
      </document-id>
      <document-id data-format="original">
        <country>US</country>
        <doc-number>10837607</doc-number>
        <date>20040504</date>
      </document-id>
      <document-id data-format="docdb" id="412046196">
        <doc-number>83760704</doc-number>
      </document-id>
      <document-id data-format="epodoc">
        <doc-number>US20040837607</doc-number>
      </document-id>
    </application-reference>
    <application-series-code>10</application-series-code>
    <language-of-filing>eng</language-of-filing>
    <language-of-publication>eng</language-of-publication>
    <dates-of-public-availability date-changed="20131114">
      <printed-with-grant>
        <date>20131105</date>
      </printed-with-grant>
    </dates-of-public-availability>
    <term-of-grant>
      <us-term-extension>1345</us-term-extension>
    </term-of-grant>
    <classifications-ipcr date-changed="20150616">
      <classification-ipcr sequence="1">
        <text>G06F   9/46        20060101AFI20131105BHUS        </text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>46</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <action-date>
          <date>20131105</date>
        </action-date>
        <generating-office>
          <country>US</country>
        </generating-office>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06F   9/45        20060101ALI20131105BHUS        </text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>45</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <action-date>
          <date>20131105</date>
        </action-date>
        <generating-office>
          <country>US</country>
        </generating-office>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
      </classification-ipcr>
    </classifications-ipcr>
    <classifications-cpc date-changed="20150616">
      <classification-cpc sequence="1">
        <text>G06F   9/4436      20130101 FI20141104BHEP        </text>
        <cpc-version-indicator>
          <date>20130101</date>
        </cpc-version-indicator>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>9</main-group>
        <subgroup>4436</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <action-date>
          <date>20141104</date>
        </action-date>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
      </classification-cpc>
    </classifications-cpc>
    <classification-national date-changed="20150616">
      <country>US</country>
      <main-classification>
        <text>718/106</text>
        <class>718</class>
        <subclass>106</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>717/144</text>
        <class>717</class>
        <subclass>144</subclass>
      </further-classification>
      <further-classification sequence="2">
        <text>717/148</text>
        <class>717</class>
        <subclass>148</subclass>
      </further-classification>
      <further-classification sequence="3">
        <text>717/156</text>
        <class>717</class>
        <subclass>156</subclass>
      </further-classification>
      <further-classification sequence="4">
        <text>718/102</text>
        <class>718</class>
        <subclass>102</subclass>
      </further-classification>
    </classification-national>
    <field-of-search date-changed="20131105">
      <classification-national>
        <country>US</country>
        <main-classification>
          <text>718/1</text>
          <class>718</class>
          <subclass>1</subclass>
        </main-classification>
      </classification-national>
      <classification-national>
        <country>US</country>
        <main-classification>
          <text>718/100-108</text>
          <class>718</class>
          <subclass>100-108</subclass>
        </main-classification>
      </classification-national>
    </field-of-search>
    <number-of-claims>12</number-of-claims>
    <exemplary-claim>1</exemplary-claim>
    <invention-title id="title_eng" date-changed="20131105" lang="eng" format="original">Method and system for merging directed acyclic graphs representing data flow codes</invention-title>
    <references-cited date-changed="20170530">
      <patent-citations name="patcit" date-changed="20131105" />
      <non-patent-citations name="nplcit" date-changed="20131105" />
      <forward-citations name="fwdcit" date-changed="20170530" />
      <citation srep-phase="e">
        <patcit num="1" dnum="US5742821A" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>5742821</doc-number>
            <kind>A</kind>
            <name>Prasanna</name>
            <date>19980421</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>5742821</doc-number>
            <kind>A</kind>
            <date>19980400</date>
          </document-id>
          <application-date>
            <date>19951108</date>
          </application-date>
        </patcit>
        <classification-national>
          <country>US</country>
          <main-classification>
            <text>718/102</text>
            <class>718</class>
            <subclass>102</subclass>
          </main-classification>
        </classification-national>
      </citation>
      <citation srep-phase="e">
        <patcit num="2" dnum="US6141792A" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>6141792</doc-number>
            <kind>A</kind>
            <name>Acker et al.</name>
            <date>20001031</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>6141792</doc-number>
            <kind>A</kind>
            <date>20001000</date>
          </document-id>
          <application-date>
            <date>19970827</date>
          </application-date>
        </patcit>
        <classification-national>
          <country>US</country>
          <main-classification>
            <text>717/116</text>
            <class>717</class>
            <subclass>116</subclass>
          </main-classification>
        </classification-national>
      </citation>
      <citation srep-phase="e">
        <patcit num="3" dnum="US6393433B1" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>6393433</doc-number>
            <kind>B1</kind>
            <name>Kalavade et al.</name>
            <date>20020521</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>6393433</doc-number>
            <kind>B1</kind>
            <date>20020500</date>
          </document-id>
          <application-date>
            <date>19980924</date>
          </application-date>
        </patcit>
        <classification-national>
          <country>US</country>
          <main-classification>
            <text>707/200</text>
            <class>707</class>
            <subclass>200</subclass>
          </main-classification>
        </classification-national>
      </citation>
      <citation srep-phase="e">
        <patcit num="4" dnum="US6442584B1" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>6442584</doc-number>
            <kind>B1</kind>
            <name>Kolli et al.</name>
            <date>20020827</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>6442584</doc-number>
            <kind>B1</kind>
            <date>20020800</date>
          </document-id>
          <application-date>
            <date>19980515</date>
          </application-date>
        </patcit>
        <classification-national>
          <country>US</country>
          <main-classification>
            <text>718/104</text>
            <class>718</class>
            <subclass>104</subclass>
          </main-classification>
        </classification-national>
      </citation>
      <citation srep-phase="e">
        <patcit num="5" dnum="US2002/0129343A1" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>20020129343</doc-number>
            <kind>A1</kind>
            <name>Pinter et al.</name>
            <date>20020912</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>2002/0129343</doc-number>
            <kind>A1</kind>
            <date>20020900</date>
          </document-id>
          <application-date>
            <date>20001228</date>
          </application-date>
        </patcit>
        <classification-national>
          <country>US</country>
          <main-classification>
            <text>717/140</text>
            <class>717</class>
            <subclass>140</subclass>
          </main-classification>
        </classification-national>
      </citation>
      <citation srep-phase="e">
        <patcit num="6" dnum="US2002/0165701A1" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>20020165701</doc-number>
            <kind>A1</kind>
            <name>Lichtenberg et al.</name>
            <date>20021107</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>2002/0165701</doc-number>
            <kind>A1</kind>
            <date>20021100</date>
          </document-id>
          <application-date>
            <date>20011130</date>
          </application-date>
        </patcit>
        <classification-national>
          <country>US</country>
          <main-classification>
            <text>703/7</text>
            <class>703</class>
            <subclass>7</subclass>
          </main-classification>
        </classification-national>
      </citation>
      <citation srep-phase="e">
        <patcit num="7" dnum="US2004/0015814A1" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>20040015814</doc-number>
            <kind>A1</kind>
            <name>Trappen et al.</name>
            <date>20040122</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>2004/0015814</doc-number>
            <kind>A1</kind>
            <date>20040100</date>
          </document-id>
          <application-date>
            <date>20020720</date>
          </application-date>
        </patcit>
        <classification-national>
          <country>US</country>
          <main-classification>
            <text>717/100</text>
            <class>717</class>
            <subclass>100</subclass>
          </main-classification>
        </classification-national>
      </citation>
      <citation srep-phase="e">
        <patcit num="8" dnum="US2004/0019599A1" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>20040019599</doc-number>
            <kind>A1</kind>
            <name>Trappen et al.</name>
            <date>20040129</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>2004/0019599</doc-number>
            <kind>A1</kind>
            <date>20040100</date>
          </document-id>
          <application-date>
            <date>20020720</date>
          </application-date>
        </patcit>
        <classification-national>
          <country>US</country>
          <main-classification>
            <text>707/102</text>
            <class>707</class>
            <subclass>102</subclass>
          </main-classification>
        </classification-national>
      </citation>
      <citation srep-phase="e">
        <patcit num="9" dnum="US2005/0102386A1" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>20050102386</doc-number>
            <kind>A1</kind>
            <name>Mills et al.</name>
            <date>20050512</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>2005/0102386</doc-number>
            <kind>A1</kind>
            <date>20050500</date>
          </document-id>
          <application-date>
            <date>20031028</date>
          </application-date>
        </patcit>
        <classification-national>
          <country>US</country>
          <main-classification>
            <text>709/223</text>
            <class>709</class>
            <subclass>223</subclass>
          </main-classification>
        </classification-national>
      </citation>
      <citation srep-phase="e">
        <patcit num="10" dnum="US2007/0271554A1" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>20070271554</doc-number>
            <kind>A1</kind>
            <name>Fletcher et al.</name>
            <date>20071122</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>2007/0271554</doc-number>
            <kind>A1</kind>
            <date>20071100</date>
          </document-id>
          <application-date>
            <date>20070808</date>
          </application-date>
        </patcit>
        <classification-national>
          <country>US</country>
          <main-classification>
            <text>717/147</text>
            <class>717</class>
            <subclass>147</subclass>
          </main-classification>
        </classification-national>
      </citation>
      <citation srep-phase="e">
        <nplcit num="1">
          <text>Cosnard, Michel et al. âCompact DAG Representation and Its Dynamic Scheduling.â Journal of Parallel and Distributed Computing. 1999.</text>
          <scopus-url>http://www.scopus.com/record/display.url?eid=2-s2.0-0004505032&amp;origin=inward</scopus-url>
        </nplcit>
      </citation>
      <citation srep-phase="e">
        <nplcit num="2">
          <text>Su, Alan et al. âUtilizing DAG Scheduling Algorithms for Entity-Level Simulations.â Proc. High Performance Computing Symposium 2002.</text>
        </nplcit>
      </citation>
      <citation srep-phase="e">
        <nplcit num="3">
          <text>Pande, Santosh et al. âA Scalable Scheduling Scheme for Functional Parallelism on Distributed Memory Multiprocessor Systems.â IEEE. Apr. 1995.</text>
        </nplcit>
      </citation>
      <citation>
        <fwdcit num="1">
          <document-id>
            <country>US</country>
            <doc-number>20140082330</doc-number>
            <kind>A1</kind>
            <date>20140320</date>
          </document-id>
          <application-date>
            <date>20120914</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="2">
          <document-id>
            <country>US</country>
            <doc-number>9043582</doc-number>
            <kind>B2</kind>
            <date>20150526</date>
          </document-id>
          <application-date>
            <date>20120914</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="3">
          <document-id>
            <country>US</country>
            <doc-number>9043774</doc-number>
            <kind>B2</kind>
            <date>20150526</date>
          </document-id>
          <application-date>
            <date>20090212</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="4">
          <document-id>
            <country>US</country>
            <doc-number>20140156329</doc-number>
            <kind>A1</kind>
            <date>20140605</date>
          </document-id>
          <application-date>
            <date>20121130</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="5">
          <document-id>
            <country>US</country>
            <doc-number>20120136492</doc-number>
            <kind>A1</kind>
            <date>20120531</date>
          </document-id>
          <application-date>
            <date>20100402</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="6">
          <document-id>
            <country>US</country>
            <doc-number>20090217248</doc-number>
            <kind>A1</kind>
            <date>20090827</date>
          </document-id>
          <application-date>
            <date>20090212</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="7">
          <document-id>
            <country>US</country>
            <doc-number>9211539</doc-number>
            <kind>B2</kind>
            <date>20151215</date>
          </document-id>
          <application-date>
            <date>20100402</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="8">
          <document-id>
            <country>US</country>
            <doc-number>20150268992</doc-number>
            <kind>A1</kind>
            <date>20150924</date>
          </document-id>
          <application-date>
            <date>20140321</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="9">
          <document-id>
            <country>US</country>
            <doc-number>20150261881</doc-number>
            <kind>A1</kind>
            <date>20150917</date>
          </document-id>
          <application-date>
            <date>20150316</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="10">
          <document-id>
            <country>US</country>
            <doc-number>9652286</doc-number>
            <kind>B2</kind>
            <date>20170516</date>
          </document-id>
          <application-date>
            <date>20140321</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="11">
          <document-id>
            <country>US</country>
            <doc-number>9665660</doc-number>
            <kind>B2</kind>
            <date>20170530</date>
          </document-id>
          <application-date>
            <date>20150316</date>
          </application-date>
        </fwdcit>
      </citation>
    </references-cited>
    <parties date-changed="20131105">
      <applicants>
        <applicant sequence="1" app-type="applicant">
          <addressbook lang="eng">
            <orgname>Oracle America, Inc.</orgname>
            <role>02</role>
            <address>
              <city>Redwood City</city>
              <state>CA</state>
              <country>US</country>
            </address>
          </addressbook>
        </applicant>
      </applicants>
      <inventors>
        <inventor sequence="1" designation="us-only">
          <addressbook lang="eng">
            <last-name>Boucher</last-name>
            <first-name>Michael L.</first-name>
            <address>
              <city>Lafayette</city>
              <state>CO</state>
              <country>US</country>
            </address>
          </addressbook>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="attorney">
          <addressbook lang="eng">
            <name>Marsh Fischmann &amp; Breyfogle, LLP</name>
          </addressbook>
        </agent>
        <agent sequence="2" rep-type="attorney">
          <addressbook lang="eng">
            <last-name>Deppe</last-name>
            <first-name>Jon P.</first-name>
          </addressbook>
        </agent>
        <agent sequence="3" rep-type="attorney">
          <addressbook lang="eng">
            <last-name>Lembke</last-name>
            <first-name>Kent A.</first-name>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <examiners>
      <primary-examiner>
        <last-name>Kawsar</last-name>
        <first-name>Abdullah Al</first-name>
        <department>2195</department>
      </primary-examiner>
    </examiners>
    <patent-family date-changed="20131105">
      <main-family family-id="162970926">
        <family-member>
          <document-id>
            <country>US</country>
            <doc-number>8578389</doc-number>
            <kind>B1</kind>
            <date>20131105</date>
          </document-id>
          <application-date>
            <date>20040504</date>
          </application-date>
        </family-member>
      </main-family>
      <complete-family family-id="162970925">
        <family-member>
          <document-id>
            <country>US</country>
            <doc-number>8578389</doc-number>
            <kind>B1</kind>
            <date>20131105</date>
          </document-id>
          <application-date>
            <date>20040504</date>
          </application-date>
        </family-member>
      </complete-family>
    </patent-family>
  </bibliographic-data>
  <abstract id="abstr_eng" date-changed="20131105" lang="eng" format="original">
    <p id="p-a-00001-en" num="0000">Methods and systems facilitating a programmer to program parts of a program in data flow programming to produce directed acyclic graphs (âDAGsâ), and then merge the graphs at runtime for efficiency and scalability. Large merged DAG can typically be processed with greater efficiency than the collection of smaller DAGs. As a result, smaller DAGs may be created while the execution of the program realizes the increased efficiency of executing a larger DAG based on the merging of the smaller DAGs. In accordance with methods and systems consistent with the present invention, a programmer creates individual data flow directed acyclic graphs in a program.</p>
  </abstract>
  <legal-data date-changed="20170503">
    <legal-event sequence="1">
      <publication-date>
        <date>20040504</date>
      </publication-date>
      <event-code-1>AS</event-code-1>
      <legal-description>ASSIGNMENT</legal-description>
      <status-identifier>C</status-identifier>
      <docdb-publication-number> US     8578389B1</docdb-publication-number>
      <docdb-application-id>412046196</docdb-application-id>
      <new-owner>SUN MICROSYSTEMS, INC., CALIFORNIA</new-owner>
      <free-text-description>ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:BOUCHER, MICHAEL;REEL/FRAME:015298/0138</free-text-description>
      <effective-date>
        <date>20040504</date>
      </effective-date>
    </legal-event>
    <legal-event sequence="2">
      <publication-date>
        <date>20151216</date>
      </publication-date>
      <event-code-1>AS</event-code-1>
      <legal-description>ASSIGNMENT</legal-description>
      <status-identifier>C</status-identifier>
      <docdb-publication-number> US     8578389B1</docdb-publication-number>
      <docdb-application-id>412046196</docdb-application-id>
      <new-owner>ORACLE AMERICA, INC., CALIFORNIA</new-owner>
      <free-text-description>MERGER AND CHANGE OF NAME;ASSIGNORS:ORACLE USA, INC.;SUN MICROSYSTEMS, INC.;ORACLE AMERICA, INC.;REEL/FRAME:037311/0233</free-text-description>
      <effective-date>
        <date>20100212</date>
      </effective-date>
    </legal-event>
    <legal-event sequence="3">
      <publication-date>
        <date>20170420</date>
      </publication-date>
      <event-code-1>FPAY</event-code-1>
      <effect>+</effect>
      <legal-description>FEE PAYMENT</legal-description>
      <status-identifier>N</status-identifier>
      <docdb-publication-number> US     8578389B1</docdb-publication-number>
      <docdb-application-id>412046196</docdb-application-id>
      <fee-payment-year>4</fee-payment-year>
    </legal-event>
  </legal-data>
  <description id="descr_eng" lang="eng" format="original" date-changed="20131105">
    <summary>
      <heading id="h-00001-en" level="1">BACKGROUND</heading>
      <p id="p-00001-en" num="0001">1. Field of the Invention</p>
      <p id="p-00002-en" num="0002">The present invention generally relates to data flow programming and directed acyclic graphs. In particular, the present invention generally relates to the merging of directed acyclic graphs in a data flow programming environment at runtime.</p>
      <p id="p-00003-en" num="0003">2. Background</p>
      <p id="p-00004-en" num="0004">Multiprocessor computer systems include two or more processors that may be employed to execute the various instructions of a computer program. A particular set of instructions may be performed by one processor while other processors perform unrelated sets of instructions.</p>
      <p id="p-00005-en" num="0005">Fast computer systems, like multiprocessor computer systems, have stimulated the rapid growth of a new way of performing scientific research. The broad classical branches of theoretical science and experimental science have been joined by computational science. Computational scientists simulate on supercomputers phenomena too complex to be reliably predicted by theory and too dangerous or expensive to be reproduced in a laboratory. Successes in computational science have caused demand for supercomputing resources to rise sharply in recent years.</p>
      <p id="p-00006-en" num="0006">During this time, multiprocessor computer systems, also referred to as âparallel computers,â have evolved from experimental contraptions in laboratories to become the everyday tools of computational scientists who need powerful computing resources in order to solve their problems. Several factors have stimulated this evolution. It is not only that the speed of light and the effectiveness of heat dissipation impose physical limits on the speed of a single processor. It is also that the cost of advanced single-processor computers increases more rapidly than their power. In addition, price/performance ratios become more favorable if the required computational power can be found from existing resources instead of purchased. This factor has caused many sites to use existing work station networks, originally purchased to do modest computational chores, as âSCANâs (SuperComputers At Night) by utilizing the workstation network as a parallel computer. This scheme has proven successful enough, and the cost effectiveness of individual workstations has increased rapidly enough, that networks of workstations have been purchased to be dedicated to parallel jobs that used to run on more expensive supercomputers. Thus, considerations of both peak performance and price/performance are pushing large-scale computing in the direction of parallelism. Despite these advances, parallel computing has obstacles to its adoption.</p>
      <p id="p-00007-en" num="0007">One obstacle to the adoption of parallel computing and its benefits in economy and power is the problem of inadequate software. The developer of a program implementing a parallel algorithm for an important computational science problem may find the current software environment to be more of an obstruction than smoothing the path to use of capable, cost-effective hardware available. This is because computer programmers generally follow a âcontrol flowâ model when developing programs, including programs for execution by multiprocessor computers systems. According to this model, the computer executes a program's instructions sequentially (i.e., in a series from the first instruction to the last instruction) as controlled by a program counter. Although this approach tends to simplify the program development process, it is inherently slow.</p>
      <p id="p-00008-en" num="0008">For example, when the program counter reaches a particular instruction in a program that requires the result of another instruction or set of instructions, the particular instruction is said to be âdependentâ on the result and the processor cannot execute that instruction until the result is available. Moreover, executing programs developed under the control flow model on multiprocessing computer systems results in a significant waste of resources because of these dependencies. For example, a first processor executing one set of instructions in the control flow program may have to wait for some time until a second processor completes execution of another set of instructions, the result of which is required by the first processor to perform its set of instructions. This wait-time translates into an unacceptable waste of computing resources in that at least one of the processors in this two-processor configuration is idle the whole time while the program is running.</p>
      <p id="p-00009-en" num="0009">To better exploit parallelism in a program some scientists have suggested use of a âdata flowâ model in place of the control flow model. The basic concept of the data flow model is to enable the execution of an instruction whenever its required operands become available, and thus, no program counters are needed in data-driven computations. Instruction initiation depends on data availability, independent of the physical location of an instruction in the program. In other words, instructions in a program are not ordered. The execution simply follows the data dependency constraints.</p>
      <p id="p-00010-en" num="0010">Programs for data-driven computations can be represented by data flow graphs. For example, consider the calculation of the following expression: [in-line-formulae]<i>z</i>=(<i>x+y</i>)*2[/in-line-formulae]</p>
      <p id="p-00011-en" num="0011">When, for example, x is 5 and y is 3, the result z is 16. In this example, z is dependent on the result of the sum and x and y. The data flow graph is a directed acyclic graph (âDAGâ) whose nodes correspond to operators and arcs are pointers for forwarding data. The graph demonstrates sequencing constraints (i.e., constraints with data dependencies) among instructions. <figref>FIG. 4</figref><i>a</i>, described below, illustrates two exemplary DAGs.</p>
      <p id="p-00012-en" num="0012">For example, in a conventional computer, program analysis is often done (i) when a program is compiled to yield better resource utilization and code optimization, and (ii) at run time to reveal concurrent arithmetic logic activities for higher system throughput. For instance, consider the following sequence of instructions: <ul id="ul-00001-en" list-style="none"><li><ul id="ul-00002-en" list-style="none"><li>1. P=X+Y</li><li>2. Q=P/Y</li><li>3. R=X*P</li><li>4. S=RâQ</li><li>5. T=R*P</li><li>6. U=S/T</li></ul></li></ul></p>
      <p id="p-00013-en" num="0019">The following five computational sequences of these instructions are permissible to guarantee the integrity of the result when executing the instructions on a serial computing system (e.g., a uniprocessor system): <ul id="ul-00003-en" list-style="none"><li><ul id="ul-00004-en" list-style="none"><li>1,2,3,4,5,6</li><li>1,3,2,5,4,6</li><li>1,3,5,2,4,6</li><li>1,2,3,5,4,6</li><li>1,3,2,4,5,6</li></ul></li></ul></p>
      <p id="p-00014-en" num="0025">For example, the first instruction must be executed first, but the second or third instruction can be executed second, because the result of the first instruction is required for either the second or third instruction, but neither the second nor the third requires the result of the other. The remainder of each sequence follows the rule that no instruction can be run until its operands (or inputs) are available.</p>
      <p id="p-00015-en" num="0026">In a multiprocessor computer system with two processors, however, it is possible to perform the six operations in four steps (instead of six) with the first processor computing step 1, followed by both processors simultaneously computing steps 2 and 3, followed by both processors simultaneously steps 4 and 5, and finally either processor computing step 6. This is an improvement over the uniprocessor approach because execution time is reduced.</p>
      <p id="p-00016-en" num="0027">Data-flow style programming typically yields the most parallelism of various programming modes, but using data-flow programming optimally typically requires programming large parts of the program in that style. Unfortunately, it is generally preferable to program small parts of a program in the data flow format because it is easier to write and easier to maintain the resulting program. It may be desirable to write small modules in the data flow style and then combine them into a large program that appears as if it were written as a single data flow program. Unfortunately, it is difficult to use the easier programming style of creating many small modules and then merge them together into the large single module that is useful for peak performance.</p>
      <p id="p-00017-en" num="0028">Therefore, a need has long existed for a method and system that overcome the problems noted above and other related problems.</p>
      <heading id="h-00002-en" level="1">SUMMARY</heading>
      <p id="p-00018-en" num="0029">Methods and systems consistent with the present invention allow a programmer to program parts of a program in data flow programming to produce directed acyclic graphs, and then merge the graphs at runtime for efficiency and scalability. The single merged directed acyclic graph may then be executed.</p>
      <p id="p-00019-en" num="0030">In one implementation, a method in a data processing system is provided comprising the steps of generating directed acyclic graphs representing executable tasks and dependencies between the executable tasks, and merging the directed acyclic graphs at runtime to create a merged directed acyclic graph.</p>
      <p id="p-00020-en" num="0031">In another implementation, a data processing system is provided comprising a memory storing a program that generates directed acyclic graphs representing executable tasks and dependencies between the executable tasks, and merges the directed acyclic graphs at runtime to create a merged directed acyclic graph. The data processing system further comprises a processor for running the program.</p>
      <p id="p-00021-en" num="0032">In yet another implementation, a computer-readable medium is provided containing instructions for controlling a data processing system to perform a method, the method comprising the steps of generating directed acyclic graphs representing executable tasks and dependencies between the executable tasks, and merging the directed acyclic graphs at runtime to create a merged directed acyclic graph.</p>
    </summary>
    <description-of-drawings>
      <heading id="h-00003-en" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
      <p id="p-00022-en" num="0033">The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate embodiments in accordance with methods and systems consistent with the present invention and, together with the description, serve to explain the advantages and principles consistent with the present invention.</p>
      <p id="p-00023-en" num="0034">
        <figref>FIG. 1</figref> depicts an exemplary data processing system suitable for use in accordance with methods and systems consistent with the present invention.</p>
      <p id="p-00024-en" num="0035">
        <figref>FIG. 2</figref> depicts a flowchart of an exemplary method for creating, designating and merging DAGs at runtime in accordance with the present invention.</p>
      <p id="p-00025-en" num="0036">
        <figref>FIG. 3</figref> depicts a flowchart of an exemplary method for merging individual DAGs into a merged DAG.</p>
    </description-of-drawings>
    <detailed-desc>
      <heading id="h-00004-en" level="1">DETAILED DESCRIPTION</heading>
      <p id="p-00026-en" num="0037">Methods and systems consistent with the present invention allow a programmer to program parts of a program in data flow programming to produce directed acyclic graphs, and then merge the graphs at runtime for efficiency and scalability. The larger merged DAG can typically be processed with greater efficiency than the collection of smaller DAGs. As a result, the programmer is able to easily create smaller DAGs while the execution of the program realizes the increased efficiency of executing a larger DAG based on the merging of the smaller DAGs.</p>
      <p id="p-00027-en" num="0038">In accordance with methods and systems consistent with the present invention, a programmer may create individual subprograms each written to execute by generating a directed acyclic graph and then execute that graph. The programmer may insert a call to an exemplary function âbegin_dagâ that indicates the beginning of the set of such subprograms that are to be merged. The programmer may also insert a call to an exemplary function âend_dagâ that indicates the end of the set of subprograms to be merged. When the program is run, the DAGs between the functions begin_dag and end_dag are collected and merged, and the larger merged DAG is then executed.</p>
      <p id="p-00028-en" num="0039">The DAGs may be merged by various means of merging the DAGs. In one embodiment, a subprogram creates a DAG at run-time by calling support subprograms such as an exemplary function âadd_node_to_dag.â When used with an individual function, add_node_to_dag adds a node to the DAG for the calling subprogram. When used with methods and systems consistent with the present invention, add_node_to_dag performs similarly unless it determines that it is within the scope of a begin_dag/end_dag pair. In that case, it adds the node into a larger DAG representing the execution of the larger set of subprograms. The function add_node_to_dag may also record ancillary information that simplifies the process of creating, validating, or executing a multi-subprogram DAG. For example, one such note could be that certain variables are local variables in a particular function, which means that they could not be linked to DAGs that arise from other functions. When merging the two DAGs, the merge operation knows that it does not need to check for dependencies involving those variables. The ancillary information could also note that certain variables are used as scratch workspace, meaning that subsequent DAG nodes that use the same variable name need not depend on the contents of the variable.</p>
      <p id="p-00029-en" num="0040">In another embodiment, a run-time system may observe at run-time that multiple DAGs are being created by the executing program and may merge the DAGs either as they are being created or after the DAGs are assembled.</p>
      <p id="p-00030-en" num="0041">In yet another embodiment, the DAG run-time system may keep separate DAGs but present to the running program the illusion that the DAGs are merged. DAG execution proceeds by having the program ask the DAG run-time system for work represented by nodes in the DAG. The DAG run-time system responds to requests for work by returning a node that has no unsatisfied dependencies. In this implementation, the DAG runtime system may maintain an arbitrary number of distinct DAGs and then return work to the running program by analyzing the separate DAGs and returning work in a way that is consistent with a set (possibly comprising only one member) of merged DAGs.</p>
      <p id="p-00031-en" num="0042">
        <figref>FIG. 1</figref> depicts an exemplary data processing system suitable for use in accordance with methods and systems consistent with the present invention. <figref>FIG. 1</figref> shows a computer <b>102</b> which may be connected to a network, which may be wired or wireless, and may be a LAN or WAN, and the computer may represent any kind of data processing device, such as a general-purpose data processing device, a personal computer, a plurality of interconnected data processing devices, video game console, clustered server, a mobile computing device, a personal data organizer, a mobile communication device including mobile telephone or similar devices. The computer <b>102</b> may represent a computer in a distributed environment, such as on the Internet. There may also be more computers <b>102</b> than shown on the figure.</p>
      <p id="p-00032-en" num="0043">A computer <b>102</b> may include a central processing unit (âCPUâ) <b>104</b>, an input-output (âI/Oâ) unit <b>106</b> such as a mouse or keyboard, or a graphical input device such as a writing tablet, and a memory <b>108</b> such as a random access memory (âRAMâ) or other dynamic storage device for storing information and instructions to be executed by the CPU. The computer <b>102</b> also includes a secondary storage device <b>116</b> such as a magnetic disk or optical disk that may communicate with each other via a bus <b>100</b> or other communication mechanism. The computer <b>102</b> may also include a display <b>112</b> such as a cathode ray tube (âCRTâ) or LCD monitor, and an audio/video input (not shown) such as a webcam and/or microphone.</p>
      <p id="p-00033-en" num="0044">Although aspects of methods and systems consistent with the present invention are described as being stored in memory <b>108</b>, one having skill in the art will appreciate all or part of methods and systems consistent with the present invention may be stored on or read from other computer-readable media, such as secondary storage devices, like hard disks, floppy disks, and CD-ROM; a carrier wave received from a network such as the Internet; or other forms of ROM or RAM either currently known or later developed. Further, although specific components of the data processing system are described, one skilled in the art will appreciate that a data processing system suitable for use with methods, systems, and articles of manufacture consistent with the present invention may contain additional or different components. The computer <b>102</b> may include a human user or may include a user agent. The term âuserâ may refer to a human user, software, hardware or any other entity using the system.</p>
      <p id="p-00034-en" num="0045">As shown, the memory <b>108</b> in the computer <b>102</b> may include a compiler <b>114</b> which translates the program from a human-readable form into a machine-readable form. It may translate it to object code or executable code or may also translate it to a byte code for interpretation by an interpreter, e.g., Java, or into other forms intended to be translated by a subsequent component into executable code.</p>
      <p id="p-00035-en" num="0046">The program <b>118</b> running in memory <b>108</b> can be a combination of user code <b>120</b> and code to support execution of the DAG. Code to support execution of the DAG, referred to the DAG run-time system <b>122</b>, includes an exporter component <b>124</b> that distributes work to subroutines that request it and a tracker component <b>126</b> that records the fact that certain units of work are complete. As part of recording that a unit of work is complete, the tracker component <b>126</b> updates the DAG to note that any dependencies represented by the completed work unit have been satisfied. This may make other units of work eligible for execution. The DAG run-time system <b>122</b> may also perform the merging of DAGs.</p>
      <p id="p-00036-en" num="0047">Although only one compiler <b>114</b> is shown, any number of compilers <b>114</b> or other components may be used. Additionally, although shown on the computer <b>102</b> in the memory <b>108</b>, these components may reside elsewhere, such as in the secondary storage <b>116</b>, or on another computer, such as another computer <b>102</b>. Furthermore, these components may be hardware or software whereas embodiments in accordance with the present invention are not limited to any specific combination of hardware and/or software. The system may be implemented in any way, in software or hardware or a combination thereof, and may be distributed among many computers. It may represented by any number of components, processes, threads, etc.</p>
      <p id="p-00037-en" num="0048">Computers <b>102</b> may communicate directly or over networks, and may communicate via wired and/or wireless connections, including peer-to-peer wireless networks, or any other method of communication. Communication may be done through any communication protocol, including known and yet to be developed communication protocols. The network may comprise many more computers <b>102</b> and than those shown on the figure, and the devices may also have additional or different components than those shown.</p>
      <p id="p-00038-en" num="0049">It will be appreciated that various modifications to detail may be made to the embodiments as described herein. Further, it is noted that a computer-readable medium may be provided having a program embodied thereon, where the program is to make a computer or system of data processing devices execute functions or operations of the features and elements of the above described examples. A computer-readable medium may include a magnetic or optical or other tangible medium on which a program is embodied, but can also be a signal, (e.g., analog or digital), electromagnetic or optical, in which the program is embodied for transmission. Further, a computer program product may be provided comprising the computer-readable medium.</p>
      <p id="p-00039-en" num="0050">
        <figref>FIG. 2</figref> depicts a flowchart of an exemplary method for creating, designating and merging DAGs at runtime in accordance with the present invention. First, the programmer creates individual DAGs to be merged (step <b>202</b>). Then the programmer inserts, before the first DAG to be merged, a call to a function, i.e., begin_dag, that will begin the merging of the DAGs (step <b>204</b>). At the end of the individual DAGs to be merged, the programmer inserts a call to a function that ends the merging of the DAGs, i.e., end_dag (step <b>206</b>). The program <b>118</b> is compiled by the compiler <b>114</b> and run (step <b>208</b>), and when the begin_dag statement is executed, the individual DAGs down to the end_dag statement are collected and merged at runtime (step <b>210</b>). The merged DAG is then executed (step <b>212</b>).</p>
      <p id="p-00040-en" num="0051">Whereas a DAG may be a graph that represents executable tasks and the dependencies between them indicating what should be done before an executable task can be executed, the availability of data controls when a particular executable task gets done. Consider the code below:</p>
      <p id="p-00041-en" num="0052">Step 1. a=b+c+z</p>
      <p id="p-00042-en" num="0053">Step 2. d=c+e+x</p>
      <p id="p-00043-en" num="0054">Step 3. f=a+g</p>
      <p id="p-00044-en" num="0055">Step 4. c=7</p>
      <p id="p-00045-en" num="0056">Steps 1 and 2 are independent with respect to each other, and either can execute before the other or they can execute in parallel. They can even execute in a merged order with b+c being computed from Step 1, then c+e computed in Step 2 before z is added to the sum of b+c in support of Step 1. Step 2 is also independent of Step 3. However, Step 3 cannot proceed until Step 1 is done because it uses the result of Step 1 (the value of a). Step 4 does not depend on the results of any previous steps, but it is still dependent on Step 1 and Step 2 because it must not write a 7 into the variable c until the previous value of c is used by Step 1 and Step 2.</p>
      <p id="p-00046-en" num="0057">The DAG for the foregoing would have 4 nodes, one for each step. The nodes would be connected by arcs indicating dependencies. There would be an arc from 1 to 3 indicating that Step 1 must complete before Step 3 begins. There are also arcs from 1 to 4 and 2 to 4. There are no arcs between 1 and 2 or between 3 and 4, so those steps may be performed in any order relative to each other.</p>
      <p id="p-00047-en" num="0058">
        <figref>FIG. 3</figref> depicts a flowchart of an exemplary method for merging individual DAGs into a merged DAG. To merge two DAGs, each node in a DAG is compared with each node in a second DAG to determine if first there are any dependencies between the two. If there are any dependencies, a directed arc is created to reflect the dependency.</p>
      <p id="p-00048-en" num="0059">If there are two or more DAGs to be merged (step <b>302</b>), a node is selected from a first DAG (step <b>304</b>). Then, a node is selected from a second DAG (step <b>306</b>) to be compared with the node that was selected from the first DAG. The system determines whether there is a dependency between the two nodes (step <b>308</b>). If there is a dependency between the two selected nodes, the system creates a directed arc to reflect the dependency (step <b>310</b>). If there are more nodes in the second DAG to be compared with the first selected node in the first DAG (step <b>312</b>), then a new node from the second DAG is selected (step <b>306</b>). Once the nodes in the second DAG are compared to the first node of the first DAG, it is determined whether there are more nodes in the first DAG to compare (step <b>314</b>). If so, a new node from the first DAG is selected (step <b>304</b>), and a new node from the second DAG is selected (step <b>306</b>). If not, in one implementation, all nodes in the first DAG and second DAG have been compared and arcs have been created for all dependencies. As a result, the first and second DAG are merged into one DAG (step <b>316</b>). If there are more DAGs to merge, in one implementation, the process may begin by merging the new larger DAG with an additional DAG (step <b>302</b>). If not, all DAGs have been merged into a single larger merged DAG. Finally, this merged DAG may then be executed. In one implementation, the merged DAG may begin execution while it is being constructed by executing nodes that will not change.</p>
      <p id="p-00049-en" num="0060">Consider two exemplary DAGs before merging and after merging, a first DAG A having various nodes including nodes <b>1</b> and <b>2</b>, and the dependencies between the nodes of the DAG, and a second DAG B having various nodes including nodes <b>3</b> and <b>4</b> and the dependencies between the nodes of the DAG. In these two DAGs A and B, node <b>1</b> depends on the completion of node <b>3</b> and node <b>2</b> depends on the completion of node <b>4</b>.</p>
      <p id="p-00050-en" num="0061">An exemplary merged DAG C, when DAGs A and B have merged in accordance with methods and systems consistent with the present invention as discussed above, in one implementation, is produced having the dependency between nodes <b>1</b> and <b>3</b>, as well as the dependency between 2 and 4. The merged DAG C is a single DAG including the two original DAGs A and B and their dependencies.</p>
      <p id="p-00051-en" num="0062">In another embodiment, an auxiliary data structure is maintained for every source of dependency that indicates every node that uses that particular source. Consider the following:</p>
      <p id="p-00052-en" num="0063">Step 1: ab=10</p>
      <p id="p-00053-en" num="0064">Step 2: cd=ef+gh</p>
      <p id="p-00054-en" num="0065">Step 3: ef=ab+cd</p>
      <p id="p-00055-en" num="0066">Step 4: cd=cf+cd</p>
      <p id="p-00056-en" num="0067">The data structure for the variable ab would indicate that only Steps 1 and 3 use ab. Therefore, when looking for dependencies based on ab, only Steps 1 and 3 need to be considered, which may save time. Data structures maybe created for all sources of dependency. This includes overt dependencies such as variables but also hidden dependencies such as file pointers and other system states.</p>
      <p id="p-00057-en" num="0068">The foregoing description of an implementation in accordance with methods and systems consistent with the present invention has been presented for purposes of illustration and description. It is not exhaustive and does not limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice. Note also that the implementation may vary between systems. Methods and systems in accordance with the present invention may be implemented with both object-oriented and non-object-oriented programming systems.</p>
    </detailed-desc>
  </description>
  <us-claim-statement>What is claimed is:</us-claim-statement>
  <claims id="claims_eng" lang="eng" format="original" date-changed="20131105">
    <claim num="1" id="clm-00001-en">
      <claim-text>1. A method in a data processing system, comprising the steps of:
<claim-text>generating a plurality of individual directed acyclic graphs, wherein each of the plurality of individual directed acyclic graphs comprise a plurality of nodes representing executable tasks and each of the plurality of individual directed acyclic graphs comprise dependencies between the plurality of nodes representing the executable tasks;</claim-text><claim-text>merging the individual directed acyclic graphs at runtime to create a merged directed acyclic graph, wherein the merged directed acyclic graph includes at least one dependency between nodes from different individual directed acyclic graphs wherein the step of merging the individual directed acyclic graphs at runtime further comprises:
<claim-text>comparing a node in a first one of the individual directed acyclic graphs with a node in a second one of the individual directed acyclic graphs to determine if there is a merged dependency between the compared nodes, and</claim-text><claim-text>creating a directed arc in the merged directed acyclic graph to reflect the merged dependency, wherein the merged dependency did not exist in the first one or the second one of the individual directed acyclic graphs individually; and</claim-text></claim-text><claim-text>executing the merged directed acyclic graph while the merged directed acyclic graph is being constructed.</claim-text></claim-text>
    </claim>
    <claim num="2" id="clm-00002-en">
      <claim-text>2. The method of <claim-ref idref="clm-00001-en">claim 1</claim-ref>, further comprising the steps of:
<claim-text>inserting a first function in a program to indicate a first of the generated individual directed acyclic graphs to be merged; and</claim-text><claim-text>inserting a second function in the program to indicate a last of the individual generated directed acyclic graphs to be merged.</claim-text></claim-text>
    </claim>
    <claim num="3" id="clm-00003-en">
      <claim-text>3. The method of <claim-ref idref="clm-00002-en">claim 2</claim-ref>, wherein the step of merging the individual directed acyclic graphs at runtime further comprises the step of:
<claim-text>merging at runtime the individual directed acyclic graphs between the indicated first individual directed acyclic graph and last individual directed acyclic graph.</claim-text></claim-text>
    </claim>
    <claim num="4" id="clm-00004-en">
      <claim-text>4. The method of <claim-ref idref="clm-00001-en">claim 1</claim-ref>, wherein the comparing step further includes:
<claim-text>comparing each node in the first one of the individual directed acyclic graphs with each node in the second one of the individual directed acyclic graphs to determine if there are dependencies between the compared nodes.</claim-text></claim-text>
    </claim>
    <claim num="5" id="clm-00005-en">
      <claim-text>5. A data processing system, comprising:
<claim-text>a memory storing a program that:
<claim-text>generates a plurality of individual directed acyclic graphs, wherein each of the plurality of individual directed acyclic graphs comprise a plurality of nodes representing executable tasks and each of the plurality of individual directed acyclic graphs comprise dependencies between plurality of nodes representing the executable tasks,</claim-text><claim-text>merges the individual directed acyclic graphs at runtime to create a merged directed acyclic graph, wherein the merged directed acyclic graph includes at least one dependency between nodes from different individual directed acyclic graphs, and</claim-text><claim-text>compares a node in a first one of the individual directed acyclic graphs with a node in a second one of the individual directed acyclic graphs to determine if there is a merged dependency between the compared nodes, and creates a directed arc in the merged directed acyclic graph to reflect the merged dependency, wherein the merged dependency did not exist in the first one or the second one of the individual directed acyclic graphs individually; and</claim-text></claim-text><claim-text>a processor for running the program, wherein the program further executes the merged directed acyclic graph while the merged directed acyclic graph is being constructed.</claim-text></claim-text>
    </claim>
    <claim num="6" id="clm-00006-en">
      <claim-text>6. The data processing system of <claim-ref idref="clm-00005-en">claim 5</claim-ref>, further including a second program having a first function in the second program to indicate a first of the generated individual directed acyclic graphs to be merged, and a second function in the second program to indicate a last of the generated individual directed acyclic graphs to be merged.</claim-text>
    </claim>
    <claim num="7" id="clm-00007-en">
      <claim-text>7. The data processing system of <claim-ref idref="clm-00006-en">claim 6</claim-ref>, wherein the program further merges at runtime the individual directed acyclic graphs between the indicated first individual directed acyclic graph and last individual directed acyclic graph.</claim-text>
    </claim>
    <claim num="8" id="clm-00008-en">
      <claim-text>8. The data processing system of <claim-ref idref="clm-00005-en">claim 5</claim-ref>, wherein the program further compares each node in the first one of the individual directed acyclic graphs with each node in the second one of the individual directed acyclic graphs to determine if there are dependencies between the compared nodes.</claim-text>
    </claim>
    <claim num="9" id="clm-00009-en">
      <claim-text>9. A tangible, non-transitory computer-readable medium containing instructions for controlling a data processing system to perform a method, the method comprising the steps of:
<claim-text>generating a plurality of individual directed acyclic graphs, wherein each of the plurality of individual directed acyclic graphs comprise a plurality of nodes representing executable tasks and each of the plurality of individual directed acyclic graphs comprise dependencies between the plurality of nodes representing the executable tasks; and</claim-text><claim-text>merging the individual directed acyclic graphs at runtime to create a merged directed acyclic graph, wherein the merged directed acyclic graph includes at least one dependency between nodes from different individual directed acyclic graphs;</claim-text><claim-text>comparing each node in a first one of the individual directed acyclic graphs with each node in a second one of the individual directed acyclic graphs to determine if there are merged dependencies between the compared nodes;</claim-text><claim-text>creating a directed arc in the merged directed acyclic graph to reflect the merged dependency, wherein the merged dependency did not exist in the first one or the second one of the individual directed acyclic graphs individually; and</claim-text><claim-text>executing the merged directed acyclic graph while the merged directed acyclic graph is being constructed.</claim-text></claim-text>
    </claim>
    <claim num="10" id="clm-00010-en">
      <claim-text>10. The computer-readable medium of <claim-ref idref="clm-00009-en">claim 9</claim-ref>, wherein the method further comprises the steps of:
<claim-text>inserting a first function in a program to indicate a first of the generated individual directed acyclic graphs to be merged; and</claim-text><claim-text>inserting a second function in the program to indicate a last of the generated individual directed acyclic graphs to be merged.</claim-text></claim-text>
    </claim>
    <claim num="11" id="clm-00011-en">
      <claim-text>11. The computer-readable medium of <claim-ref idref="clm-00010-en">claim 10</claim-ref>, wherein the step of merging the individual directed acyclic graphs at runtime further comprises the step of:
<claim-text>merging at runtime the individual directed acyclic graphs between the indicated first individual directed acyclic graph and last individual directed acyclic graph.</claim-text></claim-text>
    </claim>
    <claim num="12" id="clm-00012-en">
      <claim-text>12. A data processing system, comprising:
<claim-text>means for generating a plurality of individual directed acyclic graphs, wherein each of the plurality of individual directed acyclic graphs comprise a plurality of nodes representing executable tasks and each of the plurality of individual directed acyclic graphs comprise dependencies between the plurality of nodes representing the executable tasks; and</claim-text><claim-text>means for merging the individual directed acyclic graphs at runtime to create a merged directed acyclic graph, wherein the merged directed acyclic graph includes at least one dependency between nodes from different individual directed acyclic graphs, wherein the means for merging the individual directed acyclic graphs at runtime is operable to:
<claim-text>compare a node in a first one of the individual directed acyclic graphs with a node in a second one of the individual directed acyclic graphs to determine if there is a merged dependency between the compared nodes, and</claim-text><claim-text>create a directed arc in the merged directed acyclic graph to reflect the merged dependency, wherein the merged dependency did not exist in the first one or the second one of the individual directed acyclic graphs individually; and</claim-text></claim-text><claim-text>means for executing the merged directed acyclic graph while the merged directed acyclic graph is being constructed.</claim-text></claim-text>
    </claim>
  </claims>
  <drawings id="drawings" format="original">
    <figure num="1">
      <img he="N/A" wi="N/A" file="US8578389B1_00001.PNG" alt="clipped image" img-content="drawing" img-format="png" original="US08578389-20131105-D00000.TIF" />
    </figure>
    <figure num="2">
      <img he="N/A" wi="N/A" file="US8578389B1_00002.PNG" alt="drawing sheet" img-content="drawing" img-format="png" original="US08578389-20131105-D00001.TIF" />
    </figure>
    <figure num="3">
      <img he="N/A" wi="N/A" file="US8578389B1_00003.PNG" alt="drawing sheet" img-content="drawing" img-format="png" original="US08578389-20131105-D00002.TIF" />
    </figure>
    <figure num="4">
      <img he="N/A" wi="N/A" file="US8578389B1_00004.PNG" alt="drawing sheet" img-content="drawing" img-format="png" original="US08578389-20131105-D00003.TIF" />
    </figure>
    <figure num="5">
      <img he="N/A" wi="N/A" file="US8578389B1_00005.PNG" alt="thumbnail image" img-content="drawing" img-format="png" original="US08578389-20131105-D00000.TIF" />
    </figure>
  </drawings>
  <image file="US8578389B1.PDF" type="pdf" size="333377" pages="9" />
</lexisnexis-patent-document>