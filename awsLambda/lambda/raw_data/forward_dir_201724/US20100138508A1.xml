<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright Â©2017 LexisNexis Univentio, The Netherlands. -->
<lexisnexis-patent-document schema-version="1.13" date-produced="20170419" file="US20100138508A1.xml" produced-by="LexisNexis-Univentio" lang="eng" date-inserted="20100603" time-inserted="093917" date-changed="20170411" time-changed="214929">
  <bibliographic-data lang="eng">
    <publication-reference publ-type="Application" publ-desc="Patent application (publication)">
      <document-id id="93824688">
        <country>US</country>
        <doc-number>20100138508</doc-number>
        <kind>A1</kind>
        <date>20100603</date>
      </document-id>
      <document-id data-format="original">
        <doc-number>~20100138508</doc-number>
        <kind>A1</kind>
      </document-id>
      <document-id data-format="docdb" id="315813054">
        <doc-number>2010138508</doc-number>
      </document-id>
      <document-id data-format="epodoc">
        <doc-number>US2010138508</doc-number>
      </document-id>
    </publication-reference>
    <application-reference appl-type="utility">
      <document-id id="64369954">
        <country>US</country>
        <doc-number>12640754</doc-number>
        <kind>A</kind>
        <date>20091217</date>
      </document-id>
      <document-id data-format="original">
        <country>US</country>
        <doc-number>12640754</doc-number>
        <kind>A</kind>
        <date>20091217</date>
      </document-id>
      <document-id data-format="docdb" id="315803911">
        <doc-number>64075409</doc-number>
      </document-id>
      <document-id data-format="epodoc">
        <doc-number>US20090640754</doc-number>
      </document-id>
    </application-reference>
    <language-of-filing>eng</language-of-filing>
    <language-of-publication>eng</language-of-publication>
    <dates-of-public-availability date-changed="20100610">
      <unexamined-printed-without-grant>
        <date>20100603</date>
      </unexamined-printed-without-grant>
    </dates-of-public-availability>
    <classifications-ipcr date-changed="20131029">
      <classification-ipcr sequence="1">
        <text>G06F  15/16        20060101AFI20100603BHUS        </text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>F</subclass>
        <main-group>15</main-group>
        <subgroup>16</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <action-date>
          <date>20100603</date>
        </action-date>
        <generating-office>
          <country>US</country>
        </generating-office>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
      </classification-ipcr>
      <classification-ipcr sequence="2">
        <text>G06Q  10/00        20060101A I20060722RMEP        </text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>10</main-group>
        <subgroup>00</subgroup>
        <classification-value>I</classification-value>
        <action-date>
          <date>20060722</date>
        </action-date>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
      </classification-ipcr>
      <classification-ipcr sequence="3">
        <text>H04L  12/28        20060101A I20051110RMEP        </text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>12</main-group>
        <subgroup>28</subgroup>
        <classification-value>I</classification-value>
        <action-date>
          <date>20051110</date>
        </action-date>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
      </classification-ipcr>
      <classification-ipcr sequence="4">
        <text>H04L  29/08        20060101A I20070721RMEP        </text>
        <ipc-version-indicator>
          <date>20060101</date>
        </ipc-version-indicator>
        <classification-level>A</classification-level>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>08</subgroup>
        <classification-value>I</classification-value>
        <action-date>
          <date>20070721</date>
        </action-date>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>R</classification-status>
        <classification-data-source>M</classification-data-source>
      </classification-ipcr>
    </classifications-ipcr>
    <classifications-cpc date-changed="20131029">
      <classification-cpc sequence="1">
        <text>G06Q  10/107       20130101 FI20131024BHEP        </text>
        <cpc-version-indicator>
          <date>20130101</date>
        </cpc-version-indicator>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>10</main-group>
        <subgroup>107</subgroup>
        <symbol-position>F</symbol-position>
        <classification-value>I</classification-value>
        <action-date>
          <date>20131024</date>
        </action-date>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
      </classification-cpc>
      <classification-cpc sequence="2">
        <text>H04L  67/02        20130101 LI20131017BHEP        </text>
        <cpc-version-indicator>
          <date>20130101</date>
        </cpc-version-indicator>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>67</main-group>
        <subgroup>02</subgroup>
        <symbol-position>L</symbol-position>
        <classification-value>I</classification-value>
        <action-date>
          <date>20131017</date>
        </action-date>
        <generating-office>
          <country>EP</country>
        </generating-office>
        <classification-status>B</classification-status>
        <classification-data-source>H</classification-data-source>
      </classification-cpc>
    </classifications-cpc>
    <classification-national date-changed="20131029">
      <country>US</country>
      <main-classification>
        <text>709/206</text>
        <class>709</class>
        <subclass>206</subclass>
      </main-classification>
      <further-classification sequence="1">
        <text>709/230</text>
        <class>709</class>
        <subclass>230</subclass>
      </further-classification>
    </classification-national>
    <classifications-ecla date-changed="20131029">
      <classification-ecla sequence="1" classification-scheme="EC" country="EP">
        <text>H04L 29/08N1</text>
        <section>H</section>
        <class>04</class>
        <subclass>L</subclass>
        <main-group>29</main-group>
        <subgroup>08</subgroup>
        <additional-subgroups>
          <additional-subgroup sequence="1">N  </additional-subgroup>
          <additional-subgroup sequence="2">1  </additional-subgroup>
        </additional-subgroups>
      </classification-ecla>
      <classification-ecla sequence="2" classification-scheme="EC" country="EP">
        <text>G06Q 10/107</text>
        <section>G</section>
        <class>06</class>
        <subclass>Q</subclass>
        <main-group>10</main-group>
        <subgroup>107</subgroup>
      </classification-ecla>
    </classifications-ecla>
    <number-of-claims calculated="yes">17</number-of-claims>
    <invention-title id="title_eng" date-changed="20100603" lang="eng" format="original">MESSAGING PROTOCOL IN ENTERPRISE APPLICATIONS</invention-title>
    <references-cited date-changed="20170328">
      <patent-citations name="patcit" date-changed="20151130" />
      <forward-citations name="fwdcit" date-changed="20170328" />
      <citation>
        <patcit num="1" dnum="US2003014733A1" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>20030014733</doc-number>
            <kind>A1</kind>
            <name>RINGSETH PAUL F [US], et al</name>
            <date>20030116</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>2003014733</doc-number>
            <kind>A1</kind>
            <date>20030116</date>
          </document-id>
          <application-date>
            <date>20010710</date>
          </application-date>
        </patcit>
      </citation>
      <citation>
        <patcit num="2" dnum="US2003138618A1" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>20030138618</doc-number>
            <kind>A1</kind>
            <name>COURTOY JEAN-FRANCOIS [CA], et al</name>
            <date>20030724</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>2003138618</doc-number>
            <kind>A1</kind>
            <date>20030724</date>
          </document-id>
          <application-date>
            <date>20020111</date>
          </application-date>
        </patcit>
      </citation>
      <citation>
        <patcit num="3" dnum="US2002184070A1" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>20020184070</doc-number>
            <kind>A1</kind>
            <name>CHEN QIMING [US], et al</name>
            <date>20021205</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>2002184070</doc-number>
            <kind>A1</kind>
            <date>20021205</date>
          </document-id>
          <application-date>
            <date>20010331</date>
          </application-date>
        </patcit>
      </citation>
      <citation>
        <patcit num="4" dnum="US2002184357A1" dnum-type="publication number">
          <document-id>
            <country>US</country>
            <doc-number>20020184357</doc-number>
            <kind>A1</kind>
            <name>TRAVERSAT BERNARD A [US], et al</name>
            <date>20021205</date>
          </document-id>
          <document-id data-format="original">
            <country>US</country>
            <doc-number>2002184357</doc-number>
            <kind>A1</kind>
            <date>20021205</date>
          </document-id>
          <application-date>
            <date>20020122</date>
          </application-date>
        </patcit>
      </citation>
      <citation>
        <fwdcit num="1">
          <document-id>
            <country>US</country>
            <doc-number>8656037</doc-number>
            <kind>B2</kind>
            <date>20140218</date>
          </document-id>
          <application-date>
            <date>20080701</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="2">
          <document-id>
            <country>US</country>
            <doc-number>20120158980</doc-number>
            <kind>A9</kind>
            <date>20120621</date>
          </document-id>
          <application-date>
            <date>20080701</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="3">
          <document-id>
            <country>US</country>
            <doc-number>20090019172</doc-number>
            <kind>A1</kind>
            <date>20090115</date>
          </document-id>
          <application-date>
            <date>20080701</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="4">
          <document-id>
            <country>US</country>
            <doc-number>20160028552</doc-number>
            <kind>A1</kind>
            <date>20160128</date>
          </document-id>
          <application-date>
            <date>20150724</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="5">
          <document-id>
            <country>US</country>
            <doc-number>20150088999</doc-number>
            <kind>A1</kind>
            <date>20150326</date>
          </document-id>
          <application-date>
            <date>20140708</date>
          </application-date>
        </fwdcit>
      </citation>
      <citation>
        <fwdcit num="6">
          <document-id>
            <country>US</country>
            <doc-number>9608829</doc-number>
            <kind>B2</kind>
            <date>20170328</date>
          </document-id>
          <application-date>
            <date>20150724</date>
          </application-date>
        </fwdcit>
      </citation>
    </references-cited>
    <related-documents date-changed="20100603">
      <division>
        <relation>
          <parent-doc>
            <document-id>
              <country>US</country>
              <doc-number>10816445</doc-number>
              <date>20040331</date>
            </document-id>
            <parent-status>GRANTED</parent-status>
            <parent-grant-document>
              <document-id>
                <country>US</country>
                <doc-number>7680945</doc-number>
                <kind>A</kind>
              </document-id>
            </parent-grant-document>
          </parent-doc>
          <child-doc>
            <document-id>
              <country>US</country>
              <doc-number>12640754</doc-number>
            </document-id>
          </child-doc>
        </relation>
      </division>
    </related-documents>
    <parties date-changed="20100610">
      <applicants>
        <applicant sequence="1" app-type="applicant">
          <addressbook lang="eng">
            <orgname>HOFFMANN FRANK OLIVER</orgname>
          </addressbook>
        </applicant>
        <applicant sequence="2" app-type="applicant">
          <addressbook lang="eng">
            <orgname>FRANK JUERGEN</orgname>
          </addressbook>
        </applicant>
        <applicant sequence="3" app-type="applicant">
          <addressbook lang="eng">
            <orgname>WINKLER STEVEN T</orgname>
          </addressbook>
        </applicant>
        <applicant sequence="4" app-type="applicant">
          <addressbook lang="eng">
            <orgname>HOFMANN CHRISTOPH</orgname>
          </addressbook>
        </applicant>
        <applicant sequence="1" app-type="applicant" data-format="docdb">
          <addressbook lang="eng">
            <orgname>HOFFMANN FRANK OLIVER</orgname>
          </addressbook>
        </applicant>
        <applicant sequence="2" app-type="applicant" data-format="docdb">
          <addressbook lang="eng">
            <orgname>FRANK JUERGEN</orgname>
          </addressbook>
        </applicant>
        <applicant sequence="3" app-type="applicant" data-format="docdb">
          <addressbook lang="eng">
            <orgname>WINKLER STEVEN T</orgname>
          </addressbook>
        </applicant>
        <applicant sequence="4" app-type="applicant" data-format="docdb">
          <addressbook lang="eng">
            <orgname>HOFMANN CHRISTOPH</orgname>
          </addressbook>
        </applicant>
      </applicants>
      <inventors>
        <inventor sequence="1" designation="us-only">
          <addressbook lang="eng">
            <last-name>Hoffmann</last-name>
            <first-name>Frank Oliver</first-name>
            <address>
              <city>Wiesloch</city>
              <country>DE</country>
            </address>
          </addressbook>
          <residence>
            <country>DE</country>
          </residence>
        </inventor>
        <inventor sequence="2" designation="us-only">
          <addressbook lang="eng">
            <last-name>Frank</last-name>
            <first-name>Juergen</first-name>
            <address>
              <city>Landenburg</city>
              <country>DE</country>
            </address>
          </addressbook>
          <residence>
            <country>DE</country>
          </residence>
        </inventor>
        <inventor sequence="3" designation="us-only">
          <addressbook lang="eng">
            <last-name>Winkler</last-name>
            <first-name>Steven T.</first-name>
            <address>
              <city>Heidelberg</city>
              <country>DE</country>
            </address>
          </addressbook>
          <residence>
            <country>DE</country>
          </residence>
        </inventor>
        <inventor sequence="4" designation="us-only">
          <addressbook lang="eng">
            <last-name>Hofmann</last-name>
            <first-name>Christoph</first-name>
            <address>
              <city>Wiesloch</city>
              <country>DE</country>
            </address>
          </addressbook>
          <residence>
            <country>DE</country>
          </residence>
        </inventor>
      </inventors>
      <agents>
        <agent sequence="1" rep-type="attorney">
          <addressbook lang="eng">
            <name>MINTZ, LEVIN, COHN, FERRIS, GLOVSKY &amp; POPEO, P.C.</name>
            <address>
              <address-1>ONE FINANCIAL CENTER</address-1>
              <city>BOSTON</city>
              <state>MA</state>
              <postcode>02111</postcode>
              <country>US</country>
            </address>
          </addressbook>
        </agent>
      </agents>
    </parties>
    <patent-family date-changed="20110222">
      <main-family family-id="138142992">
        <family-member>
          <document-id>
            <country>US</country>
            <doc-number>7895349</doc-number>
            <kind>B2</kind>
            <date>20110222</date>
          </document-id>
          <application-date>
            <date>20091217</date>
          </application-date>
        </family-member>
        <family-member>
          <document-id>
            <country>US</country>
            <doc-number>20100138508</doc-number>
            <kind>A1</kind>
            <date>20100603</date>
          </document-id>
          <application-date>
            <date>20091217</date>
          </application-date>
        </family-member>
      </main-family>
      <complete-family family-id="138142991">
        <family-member>
          <document-id>
            <country>US</country>
            <doc-number>7895349</doc-number>
            <kind>B2</kind>
            <date>20110222</date>
          </document-id>
          <application-date>
            <date>20091217</date>
          </application-date>
        </family-member>
        <family-member>
          <document-id>
            <country>US</country>
            <doc-number>20100138508</doc-number>
            <kind>A1</kind>
            <date>20100603</date>
          </document-id>
          <application-date>
            <date>20091217</date>
          </application-date>
        </family-member>
      </complete-family>
    </patent-family>
  </bibliographic-data>
  <abstract id="abstr_eng" date-changed="20100603" lang="eng" format="original">
    <p id="p-a-00001-en" num="0000">Methods and apparatus, including computer systems and program products implementing a messaging protocol. The messaging protocol may be a messaging protocol for transporting a message across a messaging landscape in a collaborative network. Techniques include sending a message that is defined to include a structured message header with information related to at least one component from a set of components defined by a protocol, including protocol version information in a message such that a component of a messaging landscape can interpret the message based on the version information, defining a message as one of a class of messages, end-to-end acknowledgement for messages, and security for headers and payloads of messages.</p>
  </abstract>
  <legal-data date-changed="20170304">
    <legal-event sequence="1">
      <publication-date>
        <date>20091221</date>
      </publication-date>
      <event-code-1>AS</event-code-1>
      <legal-description>ASSIGNMENT</legal-description>
      <status-identifier>C</status-identifier>
      <docdb-publication-number> US  2010138508A1</docdb-publication-number>
      <docdb-application-id>315803911</docdb-application-id>
      <new-owner>SAP AKTIENGESELLSCHAFT,GERMANY</new-owner>
      <free-text-description>ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HOFFMAN, FRANK OLIVER;FRANK, JUERGEN;WINKLER, STEVEN T.;AND OTHERS;REEL/FRAME:023684/0533</free-text-description>
      <effective-date>
        <date>20040331</date>
      </effective-date>
    </legal-event>
    <legal-event sequence="2">
      <publication-date>
        <date>20140728</date>
      </publication-date>
      <event-code-1>FPAY</event-code-1>
      <effect>+</effect>
      <legal-description>FEE PAYMENT</legal-description>
      <status-identifier>C</status-identifier>
      <docdb-publication-number> US  2010138508A1</docdb-publication-number>
      <docdb-application-id>315803911</docdb-application-id>
      <fee-payment-year>4</fee-payment-year>
    </legal-event>
    <legal-event sequence="3">
      <publication-date>
        <date>20140826</date>
      </publication-date>
      <event-code-1>AS</event-code-1>
      <legal-description>ASSIGNMENT</legal-description>
      <status-identifier>C</status-identifier>
      <docdb-publication-number> US  2010138508A1</docdb-publication-number>
      <docdb-application-id>315803911</docdb-application-id>
      <new-owner>SAP SE, GERMANY</new-owner>
      <free-text-description>CHANGE OF NAME;ASSIGNOR:SAP AG;REEL/FRAME:033625/0334</free-text-description>
      <effective-date>
        <date>20140707</date>
      </effective-date>
    </legal-event>
  </legal-data>
  <description id="descr_eng" lang="eng" format="original" date-changed="20100603">
    <summary>
      <heading id="h-00001-en" level="1">BACKGROUND</heading>
      <p id="p-00001-en" num="0001">Companies face an increasing need for integration of, and collaboration among, their information and enterprise software systems and with their business partners. In many software system landscapes, application components are directly connected in a one-to-one relationship with other application components, and integration capabilities are hardwired into the application components. Under these conditions, upgrades, changes, or extensions to an information and enterprise software system is challenging and resource-intensive, and adversely affects collaborative sharing of information.</p>
      <p id="p-00002-en" num="0002">New electronic business collaboration typically demands connectivity among applications inside and outside of company boundaries. Networks such as the Internet provide opportunities for systems to communicate almost instantaneously with other systems or individuals. Business processes that once were restricted to intranets and their users are now moving to the Internet to become an effective composition of Web services. A Web service is a programmable, self-contained, self-describing, modular application that can be published, discovered or invoked through an open Internet standard.</p>
      <p id="p-00003-en" num="0003">Processes such as supply chain planning, sourcing, and demand forecasting are automated across enterprises and within regions, and might be implemented across systems with only marginal communication costs. To achieve this result, components from different vendors might be integrated into a consistent infrastructure. And, in order to achieve an integrated infrastructure, technical connectivity might be provided among the different components of the system.</p>
      <p id="p-00004-en" num="0004">While technical connectivity can be provided using open protocols and standards like the hypertext transfer protocol (HTTP) and extensible markup language (XML), integration of a company's business applications and web services with other parties' software platforms requires a message communication protocol that defines message communication between enterprise system components, yet utilizes open and widely accepted standards for adaptation to new technology.</p>
      <heading id="h-00002-en" level="1">SUMMARY</heading>
      <p id="p-00005-en" num="0005">Disclosed herein are methods and apparatus, including computer program products, that implement a messaging protocol.</p>
      <p id="p-00006-en" num="0006">In one general aspect, the messaging protocol features a method of transporting a message from a sending application to a receiving application, across a messaging landscape in a collaborative network. That method includes defining a message to include a structured message header, which is defined in accordance with a protocol such that the structured message header includes information related to at least one component from a set of components defined by the protocol; sending the message according to the protocol, from the sending application; and receiving the message at the receiving application. The protocol further defines the header to include information related to a processing mode for the message and security for components of the message.</p>
      <p id="p-00007-en" num="0007">Implementations may include one or more of the following features. The method may further include defining the message to include a message body, which is defined in accordance with the protocol such that the message body includes at least one component from a second set of components defined by the protocol and the protocol defines the second set of components to include a fault message component representing an error occurring at a messaging peer that generated the error. The fault message may be defined to represent at least one error from a set of errors and the protocol may define the set of errors to include errors processing a message, errors parsing a message, and errors rendering a message. The security for components of the message may be defined to include information related to a signature of the message and information related to a signature of a payload of the message, if the message includes the payload.</p>
      <p id="p-00008-en" num="0008">In another aspect, a method of transporting a message from a sending application to a receiving application, across a messaging landscape in a collaborative network, includes defining a message to include version information, such that the version information indicates a protocol used to define the message; sending the message according to the protocol; and receiving the message at a messaging component in the messaging landscape. In that case the messaging component is operative to process the message based on the version information included in the message.</p>
      <p id="p-00009-en" num="0009">Implementations may include one or more of the following features. The version information may include a major version and a minor version. The messaging component may be operative to process the message if the major version is less than or equal to a major version for which the messaging component is configured. The messaging component may be operative to process the message regardless of the minor version of the message. In that case, the messaging component is operative to optimally process the message if the minor version of the message is less than or equal to a minor version for which the messaging component is configured.</p>
      <p id="p-00010-en" num="0010">In another aspect, a method of transporting a message from a sending application to a receiving application, across a messaging landscape in a collaborative network, includes defining a message to include addressing information such that the addressing information is defined in accordance with a protocol; sending the message, from the sending application, according to the protocol; and receiving the message at the receiving application. In that method, the protocol defines addressing information to include party information for the sending application and the receiving application, and the party information to include identification of a party that is a business party or an agency as defined by a scheme.</p>
      <p id="p-00011-en" num="0011">In another aspect, a method of transporting a message from a sending application to a receiving application, across a messaging landscape in a collaborative network, includes defining a message according to a class of messages; sending the message, from the sending application, according to the protocol; and receiving the message at the receiving application. In that method, the class of messages is one of a plurality of classes of messages that are defined by a protocol.</p>
      <p id="p-00012-en" num="0012">In another aspect, a method of transporting a message from a sending application to a receiving application, across a messaging landscape in a collaborative network, includes receiving a message, from the sending application, at a first component of the collaborative network; in response to the first component successfully receiving the message, the first component sending a transport level acknowledgement to the sending application; the first component modifying the message to include the first component on a hop-list in the message; the first component causing the message to be sent to the receiving application; in response to receiving an acknowledgement message, from a second component, indicating that the message has been received by the receiving application, the first component sending a transport level acknowledgement to the second component.</p>
      <p id="p-00013-en" num="0013">In alternative implementations, causing the message to be sent to the receiving application may include the first component sending the message to one of one or more components in the collaborative network. In that case, each component is operative to send a transport level acknowledgement, in response to successfully receiving the message; cause the message to be sent to the receiving application; include the component on the hop-list in the message by modifying the message; generate the acknowledgement message if the component sends the message to the receiving application; send the acknowledgement message if the component sends the message to the receiving application; and send a transport level acknowledgement in response to successfully receiving the acknowledgement message.</p>
      <p id="p-00014-en" num="0014">The messaging protocol and related mechanisms and/or techniques described here may provide one or more of the following advantages.</p>
      <p id="p-00015-en" num="0015">A messaging protocol may be defined to include a structured message header. Thus, rather than being disorganized and difficult to parse, the structured message header allows for messages to be easily and intelligently interpreted by an application. The messaging protocol defines messages according to different classes. By having different classes, messages may be generated in accordance with the semantics corresponding to a message class and messaging peers may be able to quickly identify a message and understand how to handle it. Also, the message protocol supports end-to-end acknowledgement of asynchronous messaging, to ensure that messages are received at a receiving peer.</p>
      <p id="p-00016-en" num="0016">Details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages may be apparent from the description and drawings, and from the claims.</p>
    </summary>
    <description-of-drawings>
      <heading id="h-00003-en" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
      <p id="p-00017-en" num="0017">These and other aspects will now be described in detail with reference to the following drawings.</p>
      <p id="p-00018-en" num="0018">
        <figref>FIG. 1</figref> is a diagram of a message header.</p>
      <p id="p-00019-en" num="0019">
        <figref>FIG. 2</figref> is a diagram of a main header.</p>
      <p id="p-00020-en" num="0020">
        <figref>FIG. 3</figref> is part of a table of message classes.</p>
      <p id="p-00021-en" num="0021">
        <figref>FIG. 4</figref> is a diagram of a system for acknowledgements.</p>
      <p id="p-00022-en" num="0022">
        <figref>FIG. 5</figref> is a diagram of a system for acknowledgements.</p>
    </description-of-drawings>
    <detailed-desc>
      <p id="p-00023-en" num="0023">Like reference numerals and designations in the drawings indicate like elements.</p>
      <heading id="h-00004-en" level="1">DETAILED DESCRIPTION</heading>
      <p id="p-00024-en" num="0024">The systems and techniques described here relate to a messaging protocol for enterprise systems and business partners.</p>
      <p id="p-00025-en" num="0025">Implementations of the messaging protocol include a message header that specifies attributes of the message. Attributes may include a description of message content, or a specification of how the message is to be handled and/or processed. The message header may be divided into multiple sections (i.e. components or sub-headers), each of which specifies various attributes of the message. For example, a message header may include a main header section and a reliable messaging header section. The messaging protocol may further define the use of a number of processing modes, such as asynchronous or synchronous communications, for transmission of a message in accordance with one or more of those processing modes.</p>
      <p id="p-00026-en" num="0026">The messaging protocol may also include security protocols, for secure transmission and/or encryption of a message. Any number of programming languages and/or techniques, such as XML, can be used to implement the protocol. The protocol may be implemented in a system including a sending application, a receiving application, and any number of messaging peers. A messaging peer is a component of the messaging landscape that might handle a message and may be, for example, a server computer system. These and other aspects will now be explained in further detail.</p>
      <heading id="h-00005-en" level="1">Message Header Structure</heading>
      <p id="p-00027-en" num="0027">
        <figref>FIG. 1</figref> is a diagram of a message header <b>100</b> with components of a message specified in message header sections <b>110</b>-<b>170</b>. Each of the components of the message is defined by a messaging protocol. Thus, if an application receives a message with a message header that is composed in accordance with the messaging protocol, the receiving application can interpret the header in order to understand sections of the message. A main header section <b>110</b> specifies global attributes of the message; i.e. attributes that apply throughout the message. A reliable messaging section <b>120</b> specifies mechanisms and/or techniques that guarantee the transport of a message with certain qualities of service (QoS). Qualities of service may include mechanisms and/or techniques to guarantee delivery of a message, detect duplicates of a message, and deliver multiple messages in a particular sequence. An error section <b>130</b>, which might be included in an error message, specifies information related to an error, such as the category of error and error code. A security section <b>140</b> specifies security mechanisms and/or techniques that are used to handle the message, including information related to digital signatures and encryption. An acknowledgement section <b>150</b> specifies mechanisms and/or techniques used to send an acknowledgement of the receipt of a message. In the case that an acknowledgement message is requested, a hoplist section <b>160</b> may assist the sending of the acknowledgement message by specifying a path from the original sender to the final receiver. A diagnostic section <b>170</b> may be used to specify diagnostic information, such as a trace of the code processed to handle the message and a log of the process for storing the message. In alternative implementations, different, additional, and/or fewer components may be specified by the messaging protocol and/or included in a message header <b>100</b>.</p>
      <p id="p-00028-en" num="0028">The messaging protocol that defines the header <b>100</b> may require that applications implementing the protocol be capable of differentiating among different types of message headers, such as message headers defined in open standards for messaging, message headers used within and processed in accordance with the messaging protocol (e.g. a message header for security), and message headers of messages that do not conform to the protocol and are not necessarily processed by systems conforming to the protocoL The messaging protocol of header <b>100</b> may use any number of attributes to allow a system to determine the protocol corresponding to the message header. These attributes may exist in the header section, or alternatively, in any section of the message. For example, the namespace attribute <b>180</b> can be used to specify a protocol version to which the header <b>100</b> belongs.</p>
      <heading id="h-00006-en" level="1">Main Header Structure</heading>
      <p id="p-00029-en" num="0029">
        <figref>FIG. 2</figref> is an example of the main header <b>200</b> of a message, with attributes <b>205</b>-<b>225</b>. The main header <b>200</b> is a section of a message header, such as the main header section <b>110</b> is a section of the message header <b>100</b>, and defines global attributes for a message. The attributes of the message include a unique identifier <b>205</b> for the message, a version information <b>210</b> of the message, a message class <b>215</b> of the message, a processing mode <b>220</b> for the message, references (not shown) to other messages, a âconversationâ (not shown) related to the message, and sender/receiver information <b>225</b> about the sender and/or receiver of the message. In alternative implementations the main header <b>200</b> may include additional and/or different attributes.</p>
      <p id="p-00030-en" num="0030">The unique identifier <b>205</b> allows each message to be uniquely identifiable within the overall messaging landscape. Each message can have a unique identifier <b>205</b>. The unique identifier <b>205</b> may be generated by the sender of the message according to a standard for generating global unique identifiers, such as the ISO-11578 Standard. The standard should be used to guarantee uniqueness of the identifier <b>205</b>. While a message travels from the sender to its final receiver, traversing some number of messaging peers, i.e. other components of the system capable of handling the message, its identifier <b>205</b> should remain the same as the identifier generated by the sender. In contrast, other header data can be transformed by components between the sender and the final receiver. For example, a list of components that handle the message, such as a hop-list, may be modified by each component that handles the message. Also, in the case that a message is split at a component that handles messages, such as a server, a new identifier <b>205</b> may be created for each split message whereas the original message is stopped at that component</p>
      <p id="p-00031-en" num="0031">The version information <b>210</b> of a message indicates the version of the messaging protocol corresponding to the message. The version information <b>210</b> includes two sections: a major version and a minor version. The value for the major version indicates compatibility of systems using a major version of the same or greater value than the major version of the message. Systems conforming to a higher version number should be compatible with messages conforming to a lower major version because a system using the messaging protocol should be backwards compatible. By contrast, differences in the minor version number do not necessarily indicate incompatibility. For example, a system using a lower major version number than a message expresses that the protocols are incompatible, while differences of the minor number may still be compatible. If the major version of a message is higher than the major version corresponding to a system implementing the protocol, the implementation should respond with an error message. A system implementing the protocol may optimize the processing of messages based on the minor version number, or simply log the difference in an appropriate logging environment. The presence of an explicit message version number in the message itself allows a component handling the message to evaluate the version dependencies without parsing the entire message. The versioning information which may be included in a message header may implicitly define the version of other parts of the message. For example, a message header with the version 4.0 may implicitly define that attachments to the message conform to version 4.0.</p>
      <p id="p-00032-en" num="0032">In alternative implementations, the version information <b>210</b> may be any indicator and need not include information relating to both the major or minor version corresponding to the messaging protocol. Also, the system implementing the protocol need not be backwards compatible, or may only be backwards compatible with certain versions. In that case, an error message may be sent indicating that a message does not conform to the major version of the system implementing the protocol. Also, in alternative implementations the version corresponding to the system implementing a messaging protocol may differ from the version of the messaging protocol corresponding to a message. For example, a system with version number 4.0 may correspond to a message conforming to a messaging protocol with a version number 5.0. In that case, the system may use other mechanisms and/or techniques to determine if a message is compatible with the system.</p>
      <p id="p-00033-en" num="0033">The attribute for the message class <b>215</b> defines a message type. The messaging protocol <b>200</b> may include a number of different classes of messages, such as ApplicationMessage, ApplicationResponse, ApplicationAck, SystemAck, ApplicationError and SystemError. Messages of different message classes may have different attributes in the message header and may be invariants of the messaging protocol that have different behaviors. For example, depending on the message class, a specific subset of message headers and payloads may be required. In alternative implementations additional and/or different message classes may be defined for the messaging protocol.</p>
      <p id="p-00034-en" num="0034">The processing mode <b>220</b> for the message indicates whether a message should be processed synchronously or asynchronously. In synchronous processing the sender of a message waits until a response arrives so that the sender is aware of the status of the message. Thus, if a message is processed synchronously, a message, such as a response or error message, will be transmitted to the sender. By contrast, in asynchronous processing, the sender need not expect a response. However, if a message is processed asynchronously, the sender may request an acknowledgement, either contemporaneously with the message, or at some other time.</p>
      <p id="p-00035-en" num="0035">In an example, a message such as an ApplicationMessage may be sent using synchronous processing. The message may cause some application functionality to be executed in the receiver system. After the execution has taken place, a response message, such as ApplicationResponse or ApplicationError, may be sent from the receiver to the original sender. If the message was sent using asynchronous processing, an acknowledgement message, such as SystemAck and/or ApplicationAck, may only be sent if the original sender had requested an acknowledgement.</p>
      <p id="p-00036-en" num="0036">A message such as a system acknowledgment message (i.e. SystemAck) may be used to provide reliable messaging of asynchronous processing. System acknowledgement messages may be returned as synchronous hop-to-hop acknowledgments, such that a previous messaging peer is signaled that the next messaging peer has successfully received an asynchronous message. A messaging peer is a component of the messaging landscape that can handle the transport of a message. A next messaging peer is the next messaging peer in a series of messaging peers that handle a message, from the sender to the receiver, whereas the previous messaging peer is the messaging peer prior to the next messaging peer in that series of messaging peers.</p>
      <p id="p-00037-en" num="0037">In accordance with certain implementations of the messaging protocol, a sender can request an asynchronous acknowledgement message for a message processed asynchronously. If an asynchronous acknowledgement message is requested, an acknowledgement message is sent back to the sender. The acknowledgement message may be from a portion of the system implementing the protocol, and/or from the application that receives and/or processes the message, such as an ApplicationAck message. Thus, an asynchronous SystemAck message can be used as an end-to-end delivery acknowledgment, whereas the ApplicationAck reflects the status of the application processing the message. Either acknowledgement message can report successful and/or unsuccessful processing.</p>
      <p id="p-00038-en" num="0038">The message main header may include any number of references (not shown) to other messages. The references may be used to indicate related messages. For example, a reference might be included in an error message to indicate the message corresponding to the error message. In order to indicate another message, the unique identifier assigned to a message may be used.</p>
      <p id="p-00039-en" num="0039">The message main header may indicate that the message is related to any number of âconversationsâ (not shown). A conversation may represent a group of any number of related messages. For example, a conversation may be named âBusiness Luncheon.â By relating a message to the conversation, components that implement the messaging protocol and/or users of that system may differentiate among those messages and group them accordingly. A conversation may provide more sophisticated communication patterns than simple request/response communication patterns. For example, all messages that refer to the same conversation may belong to the same business process.</p>
      <p id="p-00040-en" num="0040">The main header <b>200</b> includes sender/receiver information <b>225</b> about the sender and/or receiver of a message. The information <b>225</b> about the sender and receiver of a message may be grouped into respective subsets of information. Each subset may contain a party and/or service. A combination of party and service may uniquely define a message sender respective to an intended message receiver, or vice versa.</p>
      <p id="p-00041-en" num="0041">The party attribute represents a party, such as a business partner, and can be identified by one of a number of different types of identifiers. For example, standardized identifiers may be used, like the DUNS numbers provided by Dun &amp; Bradstreet, bilaterally or multilaterally defined identifiers, or identifiers proprietary within one application system. Two attributes, such as agency and scheme, may further define the party attribute by providing information on the type of identifier represented by the value of the party attribute. The following is an example of a sender/receiver using the scheme attribute:</p>
      <p id="p-00042-en" num="0000">
        <tables id="tables-00001-en" num="00001">
          <table frame="none" colsep="0" rowsep="0">
            <tgroup cols="1" colsep="0" rowsep="0" align="left">
              <colspec colname="1" colwidth="217pt" align="left" />
              <thead>
                <row>
                  <entry namest="1" nameend="1" align="center" rowsep="1" />
                </row>
              </thead>
              <tbody valign="top">
                <row>
                  <entry>&lt;SAP:Sender&gt;</entry>
                </row>
                <row>
                  <entry>&lt;SAP:Party agency=â016â scheme=âDUNSâ&gt;114315195&lt;/SAP:Party&gt;</entry>
                </row>
                <row>
                  <entry>&lt;SAP:Service&gt;Purchasing&lt;/SAP:Service&gt;</entry>
                </row>
                <row>
                  <entry>&lt;/SAP:Sender&gt;</entry>
                </row>
                <row>
                  <entry>&lt;SAP:Receiver&gt;</entry>
                </row>
                <row>
                  <entry>&lt;SAP:Service&gt;SRM1&lt;/SAP:Service&gt;</entry>
                </row>
                <row>
                  <entry>&lt;/SAP:Receiver&gt;</entry>
                </row>
                <row>
                  <entry namest="1" nameend="1" align="center" rowsep="1" />
                </row>
              </tbody>
            </tgroup>
          </table>
        </tables>
      </p>
      <p id="p-00043-en" num="0042">In the example, the sender is an agency defined by the value â016â in accordance with the DUNS scheme and â114315195â uniquely identifies the sending party. The receiver of the message would be the service âSRM1.â</p>
      <p id="p-00044-en" num="0043">The service attribute of a sender and/or receiver element may be defined by any of a number of techniques. For example, the service attribute within a specific message may represent one of three different entities: a business system, a business process, or some freely defined identifier that is typically used in a business-to-business interaction between business partners. The significance of the service attribute may be limited to certain circumstances, such as internal processing within a system that implements the messaging protocol.</p>
      <heading id="h-00007-en" level="1">Message Classes</heading>
      <p id="p-00045-en" num="0044">According to the messaging protocol, any of a number of message classes may be used to define derivative invariants of the messaging protocol. Each message class may be defined in view of the main purpose of a message. For example, messages may be defined in accordance with the classes ApplicationMessage, ApplicationResponse, ApplicationError, SystemAck, ApplicationAck, or SystemError. For those classes, ApplicationMessage may be a message that is sent to an application, ApplicationResponse may be a message that synchronously responds to an ApplicationMessage (e.g. a return value in response to an ApplicationMessage that requests a calculation by a component), ApplicationError may be a message that includes an error in response to an ApplicationMessage that was caused by an application program, SystemAck may be a message acknowledging that a message has been received by a component of the system that implements the messaging protocol, ApplicationAck may be a message that informs the sender of the message about a successful or erroneous application execution of an ApplicationMessage at the final recipient, and SystemError may be a message that includes an error indicating that a system component generated an error.</p>
      <p id="p-00046-en" num="0045">Messages of different message classes may differ in the set of message attributes and/or header sections included and their protocol invariants. <figref>FIG. 3</figref> illustrates an example of message header variations for the message classes ApplicationMessage, ApplicationResponse, and ApplicationError. In the table of <figref>FIG. 3</figref>, âXâ may represent that a header is required, â-â may represent that the header is not required but may be used, and the conditional phrases may represent that the header may be required in certain conditions. For example, messages defined in accordance with the ApplicationMessage class are required to have a reliable messaging header, whereas such a header is not required for a message defined in accordance with the ApplicationResponse class.</p>
      <p id="p-00047-en" num="0046">The content of a message may depend on the message class. For example, some classes of messages may be defined to include business data while others may be defined to exclude business data. In another example, the message classes ApplicationMessage, ApplicationResponse or ApplicationError may define messages that transport business data, while SystemAck, ApplicationAck, or SystemError may define messages that do not transport business data.</p>
      <p id="p-00048-en" num="0047">The behavior of the system in response to the message may vary depending on the message class and/or the attributes that depend on the message class. For example, the types of responses generated in response to a message may vary depending on the type of processing chosen for a message, which in turn depends on the message class and message attributes. For instance, an ApplicationMessage might be sent either synchronously or asynchronously from a sender to a receiver in order to execute some application functionality in the receiver system. After the execution has taken place, an ApplicationResponse or ApplicationError message can be sent from the receiver to the original sender of the message only if synchronous processing was chosen for the ApplicationMessage. In asynchronous processing mode and if requested, a SystemAck and/or ApplicationAck message is sent from the receiver to the original sender.</p>
      <heading id="h-00008-en" level="1">Hop to Hop Communication</heading>
      <p id="p-00049-en" num="0048">A hop list header may be used to record the path from the original sender to the final receiver. After a message reaches its final destination, the hop list may be used to ensure that the path that is used for an acknowledgment message is the same path that was used to send the message to the destination. For example, an asynchronous request message may accumulate data of each messaging peer the message traverses from a sender to the final receiver. This information may reside in an attribute of the header or in a section of the header, such as the hop list header.</p>
      <p id="p-00050-en" num="0049">The hop list represents the path of a message by recording hops, each of which represents a messaging peer through which the message has passed. The hop list, for example, may include a list of individual hop tags in a hop list header. In that example, each messaging peer may add a tag to the hop list before sending the message to the next messaging peer. In this fashion, any messaging peer can determine the preceding messaging peer by looking up the last hop tag in the hop list header. Each tag that represents a hop may include, for example, a time stamp indicating the time the message arrives at the hop and a âvisitedâ attribute indicating whether the messaging peer that represents the hop tag was visited. In order to traverse the hop list in the reverse direction, the visited attributed may be set to zero when the hop tag was generated and that attribute may then be changed to 1 when returning along the path represented by the hop list. A hop tag might also include attributes for the message identifier and information related to branching of messages to ensure that branched messages are properly traversed back to the sender and the references to those messages are set correspondingly.</p>
      <p id="p-00051-en" num="0050">Reliable Messaging</p>
      <p id="p-00052-en" num="0051">A messaging protocol may include conventions for reliable messaging, which may be defined as a âreliable messagingâ header of a message. Reliable messaging describes mechanisms that guarantee message transport with certain qualities of service (QoS). QoS's include guaranteed delivery, duplicate detection, and ordered delivery (serialization, i.e. delivering messages in the intended sequence). Different techniques can be used to enforce certain QoS's. These techniques may be based on end-to-end acknowledgements (i.e. acknowledging receipt of a message) or based on QoS patterns such as âbest effort,â âexactly onceâ (EO), or âexactly once in orderâ (EOIO). In accordance with best effort, a message is sent to the receiver without a guarantee of delivery, duplicate detection, or guarantee of ordered delivery. In accordance with EO, a message is sent to the receiver exactly one time. This pattern does not contain a serialization context, thus ordering cannot be performed. However, for EO communication, delivery of the message to the next hop exactly one time (i.e. next messaging peer) is guaranteed. The guarantee may be enforced by retry mechanisms, retry services, and/or duplicate detection mechanisms. EOIO communication is an extension of EO, but includes ordered delivery of a message (i.e. messages are received exactly once and in the order in which they were sent).</p>
      <p id="p-00053-en" num="0052">The QoS pattern may be chosen for a message and made part of the reliable messaging header. As described earlier, the messaging protocol may define a message to include asynchronous or synchronous processing of a message. The selection of a QoS pattern may be limited based on the processing mode. For example, if the message is to be processed synchronously, then its QoS might be best effort. Whereas, if the message is to be processed asynchronously the QoS pattern might be EO or EOIO. Therefore, the combination of processing modes and QoS patterns may include synchronous best effort processing, asynchronous EO processing, and asynchronous EOIO processing.</p>
      <p id="p-00054-en" num="0053">For asynchronous message processing, a sender's asynchronous message execution stops with delivery to the next peer, which may or may not be a final receiver. In order to determine if the message has arrived at the final receiver, and how that message has been executed by the final receiver (i.e. the final receiver application), the sender can request both an asynchronous system acknowledgment (i.e. a message defined by the message class SystemAck) and/or an asynchronous application acknowledgement (i.e. a message defined by the message class ApplicationAck).</p>
      <p id="p-00055-en" num="0054">Either type of acknowledgement may be in response to any of a number of events. Those events may generally be described as:</p>
      <p id="p-00056-en" num="0055">(a) an internal system error has occurred in the system that implements the messaging protocol and the error occurred before the message has been delivered to the final receiver application,</p>
      <p id="p-00057-en" num="0056">(b) the message has been successfully delivered to the final receiver,</p>
      <p id="p-00058-en" num="0057">(c) the final receiver's application has been successfully executed, and/or</p>
      <p id="p-00059-en" num="0058">(d) the final receiver's application has been executed and an application error has been generated.</p>
      <p id="p-00060-en" num="0059">The events (a) and (b) may be signaled by a SystemAck message whereas events (c) and (d) may be signaled by an ApplicationAck message. In order to define a message that requests acknowledgement messages upon the occurrence of any of these events, the messaging protocol may be defined to include a number of attributes, each corresponding to a scenario. Thus, in order to enforce system acknowledgement about QoSs, any of a number of attributes may be set. For example, the attributes can include SystemErrorAckRequested (i.e. a system error acknowledgement message is requested), SystemAckRequested, (i.e. a system acknowledgement message is requested) ApplicationAckRequested (i.e. an application acknowledgement message is requested) and ApplicationErrorAckRequested (i.e. an application error acknowledgement message is requested).</p>
      <p id="p-00061-en" num="0060">An acknowledgement message that is sent back to the original sender of the message includes an attribute indicating the message for which the acknowledgement is sent. An acknowledgment message may be sent back asynchronously from the receiver to the sender by traveling the same route on which the corresponding message traveled from the sender to the receiver. In order to ensure that the same route of messaging peers is followed, a hop-list of a message is copied into the acknowledgment message, and each messaging peer along the route of the acknowledgement may mark that the acknowledgement message was handled by that messaging peer. Because messages might branch (i.e. split into two or more messages), the attribute indicating the original message from which a message was sent might change to correspond to the message identifier of the message that was at each messaging peer. Thus, while an acknowledgment message travels back from the receiver to the sender, the reference identifier may be changed to the corresponding parent message identifier based on the message branch. Also, because a message that is branched generates several new messages, an acknowledgment message may be sent to the sender for each branched message.</p>
      <heading id="h-00009-en" level="1">Behavior of Acknowledgement Messages</heading>
      <p id="p-00062-en" num="0061">Although many different types of acknowledgement messages have been described, the following description relates to positive system acknowledgement messages. An acknowledgement message is considered positive, as opposed to negative, if the corresponding message was successfully received. The message is further considered a system acknowledgement message if the message was received at the intended recipient. Further, an acknowledgement message is an application acknowledgement message if the message was successfully executed at the intended application.</p>
      <p id="p-00063-en" num="0062">In any case involving acknowledgement messages, all involved messaging peers can send an acknowledgment message in accordance with a recorded hop-list.</p>
      <heading id="h-00010-en" level="1">Positive SystemAck Messages</heading>
      <p id="p-00064-en" num="0063">An asynchronous positive system acknowledgement message may be processed in accordance with either of the two following methods. As a first alternative, a system acknowledgement message is generated after the final receiver has signaled to its previous messaging peer that the message has been persisted. As a second alternative, a system acknowledgement message is generated at about the same time the previous messaging peer is signaled that the message has been persisted.</p>
      <p id="p-00065-en" num="0064">
        <figref>FIGS. 4 and 5</figref> illustrate two alternative methods of processing a system acknowledgement message. Note that in <figref>FIG. 5</figref>, one asynchronous message from the final receiver to the corresponding integration server is avoided and, therefore might be considered more efficient. In relation to <figref>FIGS. 4 and 5</figref>, H2H signifies hop-to-hop; E2E signifies end-toend (i.e. from the sender to the receiver); AppRequest and AppMessage refer to an original message sent from a sender to a receiver; Sender Appl signifies sender application and Receiver Appl signifies receiver application; the dotted box encloses messaging peers; XI sender refers to a messaging peer corresponding to the sender application and XI receiver refers to a messaging peer corresponding to the receiver application; an integration server is a type of messaging peer; and, RefTo( ) signifies a reference to the message identified within the parenthesis.</p>
      <p id="p-00066-en" num="0065">In <figref>FIGS. 4 and 5</figref>, a message is sent from the sender application to its corresponding messaging peer (<b>410</b> and <b>510</b>). The messaging peer sends the message to a next messaging peer (i.e. the integration server) (<b>420</b> and <b>520</b>), which sends a hop-to-hop acknowledgement back to the messaging peer to indicate that the hop successfully received the message (i.e. the next messaging peer successfully received the message)(<b>430</b> and <b>530</b>). Then, that messaging peer sends the application message to a next messaging peer (i.e. the XI receiver) (<b>440</b> and <b>540</b>). Because this messaging peer is the final messaging peer in the messaging landscape (i.e. the dotted box), and the message was received, a system acknowledgement message is generated. The difference between <figref>FIG. 4</figref> and <figref>FIG. 5</figref> is that in <figref>FIG. 4</figref> an additional hop-to-hop acknowledgement is sent at <b>450</b>, whereas that acknowledgement is included in the system acknowledgement message at <b>550</b> in <figref>FIG. 5</figref>. Because a hop list was generated when sending the message to the receiving application, the system acknowledgement message is directed back along that the messaging peers that were in the hop list (<b>450</b>, <b>470</b>, <b>550</b>, and <b>560</b>) and corresponding hop acknowledgements may be generated for each peer along the way (<b>460</b>, <b>490</b>, and <b>580</b>). The application message is finally received at the receiving application at <b>480</b> and <b>570</b>. In alternative implementations the message need not be an application message and the acknowledgement need not be a system acknowledgement message; thus other messages may follow the same technique of asynchronous end-to-end acknowledgement.</p>
      <heading id="h-00011-en" level="1">SOAP Fault Messages</heading>
      <p id="p-00067-en" num="0066">A Simple Object Access Protocol (SOAP) fault message is one type of message that may correspond to an error, and generally corresponds to an error related to the processing of a message by a messaging peer that relays a message, rather than a sending of receiving application of a message. A SOAP fault message may include a single tagâe.g. faultâand that tag may have several attributes that explain the circumstances surrounding the error. The single tag may be a component of the message, and may be part of the message body or message header. If the tag is part of a message header, the tag may define a sub-header. A SOAP fault message may be created for any of a number of reasons, including errors processing a message, errors processing attachments, parsing errors, or errors in generating a response message (i.e. a message that responds to another message, e.g. ApplicationResponse or ApplicationError). However, the SOAP fault message may be limited to certain situations, such as SOAP protocol errors, messaging protocol parsing errors; and messaging protocol rendering errors. In these scenarios, other types of error messages may be used, in addition to or instead of SOAP fault messages.</p>
      <p id="p-00068-en" num="0067">Depending on the error, the messaging protocol may require that certain attributes of a SOAP fault message be set. For example, if the error is related to a parsing error or an error in generating a response message, the messaging protocol can define that a code (i.e. fault code) corresponding to the error may be set and that an actor (i.e. fault actor) corresponding to the error be identified (i.e. the messaging peer that generated an error). In addition, an attribute called âdetailâ may be set that explains the error. This attribute may a string such as âunable to parse line <b>15</b>.â The fault code may be intended for use by software to provide a mechanism for identifying a fault. To that end, fault codes may be predefined for the messaging protocol. The fault codes may extend error codes already used by adopted protocols, such as SOAP. One example of a fault code is the code âDUPLICATE DETECTEDâ that signifies a duplicate of a message was detected at a messaging peer. The fault actor may be a unique identifier of a messaging peer that generated the fault message. The fault actor attribute might not be required if the intended receiver generated the fault message, because the receiver may be determined to have generated a fault if no fault actor was specified. The detail attribute may have certain rules that apply for encoding the reason of a fault, which ensures a uniform format of the reasons for a fault.</p>
      <heading id="h-00012-en" level="1">Security</heading>
      <p id="p-00069-en" num="0068">Many business scenarios demand a secured process for exchanging messages. Sometimes messaging may be sufficiently secure if a transport line is secured through HTTPS. In other cases, for example, in business-to-business scenarios, security measures may be required at the message level, instead of or in addition to the transport line, in order to accomplish non-repudiation, confidentiality, and data integrity. Message-level security includes digital signatures and digital envelopes (i.e. encryption), which may go beyond transport-level security by ensuring different aspects of security from a sender to a receiver, beyond security of the communication segments along which a message may travel. The security information of a message may be defined in a header, sub-header, and/or a body of the message.</p>
      <p id="p-00070-en" num="0069">For message level encryption and signature, the messaging protocol adopts encryption and signature standards, such as the Web Service Security Standard (WSSS), which is based on the standards XML Encryption and XML Signature. One implementation of the messaging protocol may adopt a restricted version of XML Signature, which includes a simplistic configuration of the following:</p>
      <p id="p-00071-en" num="0070">1) Signing of the message header, i.e. the main message header may be signed for authentication and data integrity purposes. Signing the message header may secure address information and message identity. The main header can be signed as a whole, rather than in parts.</p>
      <p id="p-00072-en" num="0071">2) Signing of the payload (i.e. a portion of a message that may be an attachment or other data, separate from the header, that can be used by a receiver application and may include, for example, business data for the receiver application to use while executing a message). The payload may be signed for non-repudiation purposes. The payload can be signed as a whole. In alternative implementations, parts of the payload may be signed.</p>
      <p id="p-00073-en" num="0072">The messaging protocol may define that both the main message header and the payload should be signed or unsigned together. This may ensure consistency of security, as signing only the payload or only the main message header without the other might not be adequate security.</p>
      <p id="p-00074-en" num="0073">The messaging protocol may include a security message header. Within the security header, one or two signatures (i.e. a signature for the header and a signature for the payload) may be specified. The security header may include the following elements:</p>
      <p id="p-00075-en" num="0074">1) A security token that includes the type of credential used by the signing entity (e.g. the sending application). The security token may include, for example, usernames and certificates.</p>
      <p id="p-00076-en" num="0075">2) A signature element (e.g. a tag in XML) that includes all the information necessary for the signature, such as a description of the signed information, a value representing the signature, and a reference to the security token that is used as a key.</p>
      <p id="p-00077-en" num="0076">References from the security header to other parts of the message may be expressed by referring to attributes that identify the referenced elements (e.g., wsuld=â . . . â where the identity of the attributes is included in the quotes).</p>
      <p id="p-00078-en" num="0077">For payload signatures, a message in accordance with the messaging protocol may be considered a MIME document, thus each payload (e.g. each attachment of a message) may be encoded as a MIME part and may be identified by an identification attribute in a message manifest (i.e. a part of the message that catalogues all the payloads of a message). In order to describe the technique that was used to generate a signature of the payloads of a message such that the message may be properly interpreted by a receiving application, the technique that was used to perform a transformation may be declared in a security header and that declaration may include references to message payloads. Any technique may be used to perform the transformation. Given a private key, the technique of performing a transformation that results in signed message payloads may include the following, for each payload:</p>
      <p id="p-00079-en" num="0078">1. Computing a hash value for a payload MIME part (i.e. computing a digest for a message attachment) (e.g. the using the Secure Hashing Algorithm (SHA) Base64_encode (SHA1 (binary attachment data), where âbinary attachment dataâ is a binary version of the MIME part).</p>
      <p id="p-00080-en" num="0079">2. Inserting the hash value (i.e. the value computed at (1.)) in a manifest of a message.</p>
      <p id="p-00081-en" num="0080">3. Computing a digital signature for the manifest (i.e. the component that includes the hash value for each of the MIME parts) based on the private key.</p>
      <p id="p-00082-en" num="0081">Given a public key, the receiver may perform the following to check the authenticity of a signature:</p>
      <p id="p-00083-en" num="0082">1. Decrypting the digital signature based on the public key. The decryption results in a manifest element containing the previously computed hash value for a MIME part (i.e. this decryption should result in the MIME part that was sent that includes the hash value).</p>
      <p id="p-00084-en" num="0083">2. Computing the hash value of the MIME parts according to the transformation used to generate the signature of the payloads.</p>
      <p id="p-00085-en" num="0084">3. Comparing the hash value in the manifest element with the hash value computed at (2.) to see if the hash values are equal.</p>
      <p id="p-00086-en" num="0085">Using this technique, the receiving application may determine that, if the hash values are not equal, the message might not be authentic and thus the message might be considered corrupt (e.g. the message or the address information in the message might have been changed). Otherwise, the receiving application may consider the message authentic.</p>
      <p id="p-00087-en" num="0086">Although a few implementations have been described in detail above, other modifications are possible. Other implementations may be within the scope of the following claims.</p>
    </detailed-desc>
  </description>
  <claims id="claims_eng" lang="eng" format="original" date-changed="20100603">
    <claim num="1" id="clm-00001-en">
      <claim-text>
        <b>1</b>-<b>12</b>. (canceled)</claim-text>
    </claim>
    <claim num="13" id="clm-00002-en">
      <claim-text>
        <b>13</b>. A method of transporting a message from a sending application to a receiving application, across a messaging landscape in a collaborative network, the method comprising:
<claim-text>defining an application message having a structured application message header, the structured message header being defined in accordance with a message class of the application message determinative of content and configuration of the message header and in accordance with a messaging protocol of a business application of a collaborative business enterprise, the structured application message header comprising one or more components defined by the protocol and based on the message class with each of the one or more components relating to a corresponding set of attributes of the message, at least one of the one or more components including version information, the version information indicating the protocol used to define the message;</claim-text><claim-text>sending the message according to the protocol; and</claim-text><claim-text>receiving, at a messaging component in the messaging landscape, the message, the messaging component being operative to process the message based on the version information included in the message;</claim-text><claim-text>wherein the message class having one of multiple possible values including: a first value representative of an application-message class associated with application messages that cause specified operations to be performed at the receiving application, a second value representative of an application-response class associated with messages responsive to the application messages of the application-message class, a third value representative of an application-error class associated with error messages indicative of errors occurring at the receiving application processing the application messages and a fourth value representative of a system-acknowledge class associated with acknowledgement messages indicative that one or more application messages have been received by the receiving application.</claim-text></claim-text>
    </claim>
    <claim num="14" id="clm-00003-en">
      <claim-text>
        <b>14</b>. The method of <claim-ref idref="clm-00002-en">claim 13</claim-ref>, wherein the version information includes a major version and a minor version.</claim-text>
    </claim>
    <claim num="15" id="clm-00004-en">
      <claim-text>
        <b>15</b>. The method of <claim-ref idref="clm-00003-en">claim 14</claim-ref>, wherein the messaging component is operative to process the message if the major version is less than or equal to a major version for which the messaging component is configured.</claim-text>
    </claim>
    <claim num="16" id="clm-00005-en">
      <claim-text>
        <b>16</b>. The method of <claim-ref idref="clm-00002-en">claim 13</claim-ref>, wherein the messaging component is operative to process the message regardless of the minor version of the message and the messaging component is operative to optimally process the message if the minor version of the message is less than or equal to a minor version for which the messaging component is configured.</claim-text>
    </claim>
    <claim num="17" id="clm-00006-en">
      <claim-text>
        <b>17</b>. A method of transporting a message from a sending application to a receiving application, across a messaging landscape in a collaborative network, the method comprising:
<claim-text>defining an application message having a structured application message header, the structured application message header including one or more components defined in accordance with a messaging protocol of a business application of a collaborative business enterprise and based on a message class determinative of content and configuration of the message header, with each of the one or more components relating to a corresponding set of attributes of the message, at least one of the one or more components including addressing information defining:
<claim-text>addressing information to include party information for the sending application and the receiving application, and</claim-text><claim-text>the party information to include identification of a party that is a business party or an agency that is defined by a scheme;</claim-text></claim-text><claim-text>sending the message, from the sending application, according to the protocol; and</claim-text><claim-text>receiving, at the receiving application, the message;</claim-text><claim-text>wherein the message class having one of multiple possible values including: a first value representative of an application-message class associated with application messages that cause specified operations to be performed at the receiving application, a second value representative of an application-response class associated with messages responsive to the application messages of the application-message class, a third value representative of an application-error class associated with error messages indicative of errors occurring at the receiving application processing the application messages and a fourth value representative of a system-acknowledge class associated with acknowledgement messages indicative that one or more application messages have been received by the receiving application.</claim-text></claim-text>
    </claim>
    <claim num="18" id="clm-00007-en">
      <claim-text>
        <b>18</b>. A method of transporting a message from a sending application to a receiving application, across a messaging landscape in a collaborative network, the method comprising:
<claim-text>defining an application message according to a class of messages, the class of messages is one of a plurality of classes of messages that are defined by a messaging protocol of a business application of a collaborative business enterprise, the application message having a structured application message header, the structured message header being defined in accordance with the application messaging protocol and based on the class of messages, the structured application message header comprising one or more components defined by the protocol with each of the one or more components relating to a corresponding set of attributes of the message;</claim-text><claim-text>sending the message, from the sending application, according to the protocol; and</claim-text><claim-text>receiving, at the receiving application, the message;</claim-text><claim-text>wherein the class of messages includes one of: an application-message class associated with application messages that cause specified operations to be performed at the receiving application, an application-response class associated with messages responsive to the application messages of the application-message class, an application-error class associated with error messages indicative of errors occurring at the receiving application processing the application messages and a system-acknowledge class associated with acknowledgement messages indicative that one or more application messages have been received by the receiving application.</claim-text></claim-text>
    </claim>
    <claim num="19" id="clm-00008-en">
      <claim-text>
        <b>19</b>. A method of transporting a message from a sending application to a receiving application, across a messaging landscape in a collaborative network, the method comprising:
<claim-text>receiving an application message, from the sending application, at a first component of the collaborative network, the application message having a structured application message header, the structured message header being defined in accordance with a protocol of a business application of a collaborative business enterprise and in accordance with a message class determinative of content and configuration of the message header, the structured application message header comprising one or more components defined by the protocol and based on the message class with each of the one or more components relating to an associated set of attributes of the message;</claim-text><claim-text>in response to the first component successfully receiving the message, the first component sending a transport level acknowledgement to the sending application;</claim-text><claim-text>the first component modifying the message to include the first component on a hop-list in the message;</claim-text><claim-text>the first component causing the message to be sent to the receiving application;</claim-text><claim-text>in response to receiving an acknowledgement message, from a second component, indicating that the message has been received by the receiving application, the first component sending a transport level acknowledgement to the second component;</claim-text><claim-text>wherein the message class having one of multiple possible values including: a first value representative of an application-message class associated with application messages that cause specified operations to be performed at the receiving application, a second value representative of an application-response class associated with messages responsive to the application messages of the application-message class, a third value representative of an application-error class associated with error messages indicative of errors occurring at the receiving application processing the application messages and a fourth value representative of system-acknowledge class associated with acknowledgement messages indicative that one or more application messages have been received by the receiving application.</claim-text></claim-text>
    </claim>
    <claim num="20" id="clm-00009-en">
      <claim-text>
        <b>20</b>. A method in accordance with the method of <claim-ref idref="clm-00008-en">claim 19</claim-ref>, wherein causing the message to be sent to the receiving application comprises:
<claim-text>the first component sending the message to one of one or more components in the collaborative network, wherein each component is operative to:</claim-text><claim-text>send a transport level acknowledgement, in response to successfully receiving the message;</claim-text><claim-text>cause the message to be sent to the receiving application;</claim-text><claim-text>include the component on the hop-list in the message, by modifying the message;</claim-text><claim-text>if the component sends the message to the receiving application,
<claim-text>generate the acknowledgement message, and</claim-text><claim-text>send the acknowledgement message; and</claim-text><claim-text>send a transport level acknowledgement in response to successfully receiving the acknowledgement message.</claim-text></claim-text></claim-text>
    </claim>
    <claim num="21" id="clm-00010-en">
      <claim-text>
        <b>21</b>. A system to transport a message from a sending application to a receiving application, across a messaging landscape in a collaborative network, the system comprising:
<claim-text>at least one processor connected to the network; and</claim-text><claim-text>at least one storage device coupled to the at least one processor, the at least one storage device storing computer instructions that, when executed on the at least one processor, cause the at least one processor to:</claim-text><claim-text>define an application message having a structured application message header, the structured message header being defined in accordance with a message class of the application message determinative of content and configuration of the message header and in accordance with a messaging protocol of a business application of a collaborative business enterprise, the structured application message header comprising one or more components defined by the protocol and based on the message class with each of the one or more components relating to a corresponding set of attributes of the message, at least one of the one or more components including version information, the version information indicating the protocol used to define the message;</claim-text><claim-text>send the message according to the protocol; and</claim-text><claim-text>receive, at a messaging component in the messaging landscape, the message, the messaging component being operative to process the message based on the version information included in the message;</claim-text><claim-text>wherein the message class having one of multiple possible values including: a first value representative of an application-message class associated with application messages that cause specified operations to be performed at the receiving application, a second value representative of an application-response class associated with messages responsive to the application messages of the application-message class, a third value representative of an application-error class associated with error messages indicative of errors occurring at the receiving application processing the application messages and a fourth value representative of a system-acknowledge class associated with acknowledgement messages indicative that one or more application messages have been received by the receiving application.</claim-text></claim-text>
    </claim>
    <claim num="22" id="clm-00011-en">
      <claim-text>
        <b>22</b>. The system of <claim-ref idref="clm-00010-en">claim 21</claim-ref>, wherein the version information includes a major version and a minor version.</claim-text>
    </claim>
    <claim num="23" id="clm-00012-en">
      <claim-text>
        <b>23</b>. The system of <claim-ref idref="clm-00011-en">claim 22</claim-ref>, wherein the messaging component is operative to process the message if the major version is less than or equal to a major version for which the messaging component is configured.</claim-text>
    </claim>
    <claim num="24" id="clm-00013-en">
      <claim-text>
        <b>24</b>. The system of <claim-ref idref="clm-00010-en">claim 21</claim-ref>, wherein the messaging component is operative to process the message regardless of the minor version of the message and the messaging component is operative to optimally process the message if the minor version of the message is less than or equal to a minor version for which the messaging component is configured.</claim-text>
    </claim>
    <claim num="25" id="clm-00014-en">
      <claim-text>
        <b>25</b>. A computer program product residing on at least one computer readable storage device and comprising computer instructions that when executed on at least one processor-based device cause the at least one processor-based device to:
<claim-text>define an application message having a structured application message header, the structured message header being defined in accordance with a message class of the application message determinative of content and configuration of the message header and in accordance with a messaging protocol of a business application of a collaborative business enterprise, the structured application message header comprising one or more components defined by the protocol and based on the message class with each of the one or more components relating to a corresponding set of attributes of the message, at least one of the one or more components including version information, the version information indicating the protocol used to define the message;</claim-text><claim-text>send the message according to the protocol; and</claim-text><claim-text>receive, at a messaging component in the messaging landscape, the message, the messaging component being operative to process the message based on the version information included in the message;</claim-text><claim-text>wherein the message class having one of multiple possible values including: a first value representative of an application-message class associated with application messages that cause specified operations to be performed at the receiving application, a second value representative of an application-response class associated with messages responsive to the application messages of the application-message class, a third value representative of an application-error class associated with error messages indicative of errors occurring at the receiving application processing the application messages and a fourth value representative of a system-acknowledge class associated with acknowledgement messages indicative that one or more application messages have been received by the receiving application.</claim-text></claim-text>
    </claim>
    <claim num="26" id="clm-00015-en">
      <claim-text>
        <b>26</b>. The computer program product of <claim-ref idref="clm-00014-en">claim 25</claim-ref>, wherein the version information includes a major version and a minor version.</claim-text>
    </claim>
    <claim num="27" id="clm-00016-en">
      <claim-text>
        <b>27</b>. The computer program product of <claim-ref idref="clm-00015-en">claim 26</claim-ref>, wherein the messaging component is operative to process the message if the major version is less than or equal to a major version for which the messaging component is configured.</claim-text>
    </claim>
    <claim num="28" id="clm-00017-en">
      <claim-text>
        <b>28</b>. The computer program product of <claim-ref idref="clm-00014-en">claim 25</claim-ref>, wherein the messaging component is operative to process the message regardless of the minor version of the message and the messaging component is operative to optimally process the message if the minor version of the message is less than or equal to a minor version for which the messaging component is configured.</claim-text>
    </claim>
  </claims>
  <drawings id="drawings" format="original">
    <figure num="1">
      <img he="N/A" wi="N/A" file="US20100138508A1_00001.PNG" alt="clipped image" img-content="drawing" img-format="png" original="US20100138508A1-20100603-D00000.TIF" />
    </figure>
    <figure num="2">
      <img he="N/A" wi="N/A" file="US20100138508A1_00002.PNG" alt="drawing sheet" img-content="drawing" img-format="png" original="US20100138508A1-20100603-D00001.TIF" />
    </figure>
    <figure num="3">
      <img he="N/A" wi="N/A" file="US20100138508A1_00003.PNG" alt="drawing sheet" img-content="drawing" img-format="png" original="US20100138508A1-20100603-D00002.TIF" />
    </figure>
    <figure num="4">
      <img he="N/A" wi="N/A" file="US20100138508A1_00004.PNG" alt="drawing sheet" img-content="drawing" img-format="png" original="US20100138508A1-20100603-D00003.TIF" />
    </figure>
    <figure num="5">
      <img he="N/A" wi="N/A" file="US20100138508A1_00005.PNG" alt="drawing sheet" img-content="drawing" img-format="png" original="US20100138508A1-20100603-D00004.TIF" />
    </figure>
    <figure num="6">
      <img he="N/A" wi="N/A" file="US20100138508A1_00006.PNG" alt="drawing sheet" img-content="drawing" img-format="png" original="US20100138508A1-20100603-D00005.TIF" />
    </figure>
    <figure num="7">
      <img he="N/A" wi="N/A" file="US20100138508A1_00007.PNG" alt="thumbnail image" img-content="drawing" img-format="png" original="US20100138508A1-20100603-D00000.TIF" />
    </figure>
  </drawings>
  <image file="US20100138508A1.PDF" type="pdf" size="281573" pages="16" />
</lexisnexis-patent-document>