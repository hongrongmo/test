Sending Email alerts

You will need ant or a batch file which calls ant

c:\javaplatform2\eijava\emailalerts> % ant dist

The dist target will copy all needed jar, HTML/GIF, XML, XSL files needed from
the EV2 project directory structure. It is assumed to be at the same level as the
emailalert sub-project.  The following values are the defaults in the build.xml file.
You may overrisde any of these by specifying it on the command line.

	i.e. -Ddir.eijava-root=/home/engpub

	<property name="dir.eijava-root" value=".."/>
	<property name="dir.eilib-jars" value="${dir.eijava-root}/dist" />
	<property name="dir.ext-jars" value="${dir.eijava-root}/ext" />
	<property name="dir.englib-jars" value="${dir.eijava-root}/engvillage/englib" />
	<property name="dir.engvillage-project" value="${dir.eijava-root}/engvillage" />

The main property which all of the other properties depend on is dir.eijava-root.

c:\javaplatform2\eijava\emailalerts> % ant run -Dyearweek=<YYYYWW> [-Denv=<environment properties file prefix>]

Thr run target will create the config files, emailalert.properties and emailalert.pool from
corresponding ".in " files, substituting the values found in the <env prefix>_env.properties
file.  The default environment is dev.  The <env prefix>_env.properties files are in the root
of the emailalerts subproject.  New environments can be created as needed.

i.e. To create an environment for stage, copy the dev_env.properties to stage_env.properties, substitute
the values in the file for the values corresponding to the stage environment.  When target run is invoked, specify the
new environment using -Denv=stage.

TESTING NOTES

A Log file is created for each run and stored in the logs directory.

DO NOT delete the log files if you have any problems.  It is a trace of the activity
of the program.

The emailalert.pool and the emailalert.properties files will be created by the run target and copied into the etc directory.

DO NOT edit the emailalert.pool or the emailalert.properties files, any changes you make will be overwritten
by the configuration step of the run target.  Instead, edit the ".in" files.

To change a property in the emailalerts.properties to be parameterized and therefore dynamically dependent on the specified
environment, add a name/value pair to the environment properties file.

Then change the property in the emailalert.properties.in file to use a filter token, which will cause
its value to be replaced by the run target configuration procedure.

i.e., Parameterize the EMAILALERTSIZE property.

Add name/value pair to ALL environment properties files.
---------------------- dev_env.properties ----------------------
emailalerts_size=25
---------------------- china_env.properties ----------------------
emailalerts_size=10


Replace the value in the emailalert.properties.in with a substution token which is the name
from the name/value pair in the environment properties file, surrounded by '@' symbols.
---------------------- emailalert.properties.in ----------------------
EMAILALERTSIZE=@emailalerts_size@

Now when the run target is invoked, the number of records included in an email alert will be dynamic,
depending on the value in the environment property file.

Logging of the sent emails is done in a database table in the EV_SESSION schema, EMAIL_ALERT_TRANS.
This logging prevents the same user from receiving multiple emails for the same search for the same week.
That way if the program crashes or dies, any sent emails will have been recorded and sending will resume
from the next unsent email alert.

The key in the table is year and week of the email alert, the user's id, their email address,
and the id assigned by the system to the query. When the system is tested (see below), the sent emails
are written to the DB and then the record is deleted to allow multiple testing runs.

When the system first starts a query is run to determine the # of emails which need to be sent,
this is printed out along with the number actually sent when program completes.


!!!!!!!!!!!!!!!!!!!! IMPORTANT IMPORTANT IMPORTANT IMPORTANT IMPORTANT	!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!! HOW TO TEST W/O ACTUALLY SENDING MAIL TO USERS 	!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!! AND INSTEAD TO AN ALTERNATE TEST ADDRESS 			!!!!!!!!!!!!!!!!!!!!

Settings in ./etc/emailalert.properties.in

TESTRECEPIENTS=j.moschetto@elsevier.com,jmoschet@netscape.net,els@usermail.com

Setting this property will prevent email alerts from going out
to user's email and redirect all mail to the list of users (comma separated)
and will not write transaction to DB

It is a good idea to run a test, and also run to multiple clients
I run to POP mail, Exchange Mail and Web HTML Mail

You should also use the following property when testing or else you will run
all emails to your test list.  Last week there were 298 emails and it took over
seven minutes to process them.

TESTEMAILFILTER=vtt.fi
Setting this property will filter all outgoing email addresses, enabling you to
process only messages which contain the following string
This property will affect ALL OUTGOING MESSAGES - TEST OR LIVE.
IF you have it set by accident going live, you can re-run the emails without
worry that the DB log will have recorded the earlier email and not send it again.





